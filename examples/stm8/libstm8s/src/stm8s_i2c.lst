                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Fri Sep 20 09:49:48 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module stm8s_i2c
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _I2C_DeInit
                                     13 	.globl _I2C_Init
                                     14 	.globl _I2C_Cmd
                                     15 	.globl _I2C_GeneralCallCmd
                                     16 	.globl _I2C_GenerateSTART
                                     17 	.globl _I2C_GenerateSTOP
                                     18 	.globl _I2C_SoftwareResetCmd
                                     19 	.globl _I2C_StretchClockCmd
                                     20 	.globl _I2C_AcknowledgeConfig
                                     21 	.globl _I2C_ITConfig
                                     22 	.globl _I2C_FastModeDutyCycleConfig
                                     23 	.globl _I2C_ReceiveData
                                     24 	.globl _I2C_Send7bitAddress
                                     25 	.globl _I2C_SendData
                                     26 	.globl _I2C_CheckEvent
                                     27 	.globl _I2C_GetLastEvent
                                     28 	.globl _I2C_GetFlagStatus
                                     29 	.globl _I2C_ClearFlag
                                     30 	.globl _I2C_GetITStatus
                                     31 	.globl _I2C_ClearITPendingBit
                                     32 ;--------------------------------------------------------
                                     33 ; ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DATA
                                     36 ;--------------------------------------------------------
                                     37 ; ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area INITIALIZED
                                     40 ;--------------------------------------------------------
                                     41 ; absolute external ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area DABS (ABS)
                                     44 ;--------------------------------------------------------
                                     45 ; global & static initialisations
                                     46 ;--------------------------------------------------------
                                     47 	.area HOME
                                     48 	.area GSINIT
                                     49 	.area GSFINAL
                                     50 	.area GSINIT
                                     51 ;--------------------------------------------------------
                                     52 ; Home
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
                                     55 	.area HOME
                                     56 ;--------------------------------------------------------
                                     57 ; code
                                     58 ;--------------------------------------------------------
                                     59 	.area CODE
                                     60 ;	libstm8s/src/stm8s_i2c.c: 67: void I2C_DeInit(void)
                                     61 ;	-----------------------------------------
                                     62 ;	 function I2C_DeInit
                                     63 ;	-----------------------------------------
      000000                         64 _I2C_DeInit:
                                     65 ;	libstm8s/src/stm8s_i2c.c: 69: I2C->CR1 = I2C_CR1_RESET_VALUE;
      000000 35 00 52 10      [ 1]   66 	mov	0x5210+0, #0x00
                                     67 ;	libstm8s/src/stm8s_i2c.c: 70: I2C->CR2 = I2C_CR2_RESET_VALUE;
      000004 35 00 52 11      [ 1]   68 	mov	0x5211+0, #0x00
                                     69 ;	libstm8s/src/stm8s_i2c.c: 71: I2C->FREQR = I2C_FREQR_RESET_VALUE;
      000008 35 00 52 12      [ 1]   70 	mov	0x5212+0, #0x00
                                     71 ;	libstm8s/src/stm8s_i2c.c: 72: I2C->OARL = I2C_OARL_RESET_VALUE;
      00000C 35 00 52 13      [ 1]   72 	mov	0x5213+0, #0x00
                                     73 ;	libstm8s/src/stm8s_i2c.c: 73: I2C->OARH = I2C_OARH_RESET_VALUE;
      000010 35 00 52 14      [ 1]   74 	mov	0x5214+0, #0x00
                                     75 ;	libstm8s/src/stm8s_i2c.c: 74: I2C->ITR = I2C_ITR_RESET_VALUE;
      000014 35 00 52 1A      [ 1]   76 	mov	0x521a+0, #0x00
                                     77 ;	libstm8s/src/stm8s_i2c.c: 75: I2C->CCRL = I2C_CCRL_RESET_VALUE;
      000018 35 00 52 1B      [ 1]   78 	mov	0x521b+0, #0x00
                                     79 ;	libstm8s/src/stm8s_i2c.c: 76: I2C->CCRH = I2C_CCRH_RESET_VALUE;
      00001C 35 00 52 1C      [ 1]   80 	mov	0x521c+0, #0x00
                                     81 ;	libstm8s/src/stm8s_i2c.c: 77: I2C->TRISER = I2C_TRISER_RESET_VALUE;
      000020 35 02 52 1D      [ 1]   82 	mov	0x521d+0, #0x02
      000024 81               [ 4]   83 	ret
                                     84 ;	libstm8s/src/stm8s_i2c.c: 96: void I2C_Init(uint32_t OutputClockFrequencyHz, uint16_t OwnAddress, 
                                     85 ;	-----------------------------------------
                                     86 ;	 function I2C_Init
                                     87 ;	-----------------------------------------
      000025                         88 _I2C_Init:
      000025 52 0A            [ 2]   89 	sub	sp, #10
                                     90 ;	libstm8s/src/stm8s_i2c.c: 102: uint8_t tmpccrh = 0;
      000027 0F 03            [ 1]   91 	clr	(0x03, sp)
                                     92 ;	libstm8s/src/stm8s_i2c.c: 115: I2C->FREQR &= (uint8_t)(~I2C_FREQR_FREQ);
      000029 AE 52 12         [ 2]   93 	ldw	x, #0x5212
      00002C F6               [ 1]   94 	ld	a, (x)
      00002D A4 C0            [ 1]   95 	and	a, #0xc0
      00002F F7               [ 1]   96 	ld	(x), a
                                     97 ;	libstm8s/src/stm8s_i2c.c: 117: I2C->FREQR |= InputClockFrequencyMHz;
      000030 AE 52 12         [ 2]   98 	ldw	x, #0x5212
      000033 F6               [ 1]   99 	ld	a, (x)
      000034 1A 16            [ 1]  100 	or	a, (0x16, sp)
      000036 AE 52 12         [ 2]  101 	ldw	x, #0x5212
      000039 F7               [ 1]  102 	ld	(x), a
                                    103 ;	libstm8s/src/stm8s_i2c.c: 121: I2C->CR1 &= (uint8_t)(~I2C_CR1_PE);
      00003A 72 11 52 10      [ 1]  104 	bres	0x5210, #0
                                    105 ;	libstm8s/src/stm8s_i2c.c: 124: I2C->CCRH &= (uint8_t)(~(I2C_CCRH_FS | I2C_CCRH_DUTY | I2C_CCRH_CCR));
      00003E AE 52 1C         [ 2]  106 	ldw	x, #0x521c
      000041 F6               [ 1]  107 	ld	a, (x)
      000042 A4 30            [ 1]  108 	and	a, #0x30
      000044 F7               [ 1]  109 	ld	(x), a
                                    110 ;	libstm8s/src/stm8s_i2c.c: 125: I2C->CCRL &= (uint8_t)(~I2C_CCRL_CCR);
      000045 AE 52 1B         [ 2]  111 	ldw	x, #0x521b
      000048 F6               [ 1]  112 	ld	a, (x)
      000049 35 00 52 1B      [ 1]  113 	mov	0x521b+0, #0x00
                                    114 ;	libstm8s/src/stm8s_i2c.c: 136: result = (uint16_t) ((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz * 3));
      00004D 5F               [ 1]  115 	clrw	x
      00004E 7B 16            [ 1]  116 	ld	a, (0x16, sp)
      000050 97               [ 1]  117 	ld	xl, a
      000051 90 5F            [ 1]  118 	clrw	y
      000053 89               [ 2]  119 	pushw	x
      000054 90 89            [ 2]  120 	pushw	y
      000056 4B 40            [ 1]  121 	push	#0x40
      000058 4B 42            [ 1]  122 	push	#0x42
      00005A 4B 0F            [ 1]  123 	push	#0x0f
      00005C 4B 00            [ 1]  124 	push	#0x00
      00005E CDr00r00         [ 4]  125 	call	__mullong
      000061 5B 08            [ 2]  126 	addw	sp, #8
      000063 1F 09            [ 2]  127 	ldw	(0x09, sp), x
      000065 17 07            [ 2]  128 	ldw	(0x07, sp), y
                                    129 ;	libstm8s/src/stm8s_i2c.c: 128: if (OutputClockFrequencyHz > I2C_MAX_STANDARD_FREQ) /* FAST MODE */
      000067 AE 86 A0         [ 2]  130 	ldw	x, #0x86a0
      00006A 13 0F            [ 2]  131 	cpw	x, (0x0f, sp)
      00006C A6 01            [ 1]  132 	ld	a, #0x01
      00006E 12 0E            [ 1]  133 	sbc	a, (0x0e, sp)
      000070 4F               [ 1]  134 	clr	a
      000071 12 0D            [ 1]  135 	sbc	a, (0x0d, sp)
      000073 24 77            [ 1]  136 	jrnc	00109$
                                    137 ;	libstm8s/src/stm8s_i2c.c: 131: tmpccrh = I2C_CCRH_FS;
      000075 A6 80            [ 1]  138 	ld	a, #0x80
      000077 6B 03            [ 1]  139 	ld	(0x03, sp), a
                                    140 ;	libstm8s/src/stm8s_i2c.c: 133: if (I2C_DutyCycle == I2C_DUTYCYCLE_2)
      000079 0D 13            [ 1]  141 	tnz	(0x13, sp)
      00007B 26 23            [ 1]  142 	jrne	00102$
                                    143 ;	libstm8s/src/stm8s_i2c.c: 136: result = (uint16_t) ((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz * 3));
      00007D 1E 0F            [ 2]  144 	ldw	x, (0x0f, sp)
      00007F 89               [ 2]  145 	pushw	x
      000080 1E 0F            [ 2]  146 	ldw	x, (0x0f, sp)
      000082 89               [ 2]  147 	pushw	x
      000083 4B 03            [ 1]  148 	push	#0x03
      000085 5F               [ 1]  149 	clrw	x
      000086 89               [ 2]  150 	pushw	x
      000087 4B 00            [ 1]  151 	push	#0x00
      000089 CDr00r00         [ 4]  152 	call	__mullong
      00008C 5B 08            [ 2]  153 	addw	sp, #8
      00008E 89               [ 2]  154 	pushw	x
      00008F 90 89            [ 2]  155 	pushw	y
      000091 1E 0D            [ 2]  156 	ldw	x, (0x0d, sp)
      000093 89               [ 2]  157 	pushw	x
      000094 1E 0D            [ 2]  158 	ldw	x, (0x0d, sp)
      000096 89               [ 2]  159 	pushw	x
      000097 CDr00r00         [ 4]  160 	call	__divulong
      00009A 5B 08            [ 2]  161 	addw	sp, #8
      00009C 1F 01            [ 2]  162 	ldw	(0x01, sp), x
      00009E 20 28            [ 2]  163 	jra	00103$
      0000A0                        164 00102$:
                                    165 ;	libstm8s/src/stm8s_i2c.c: 141: result = (uint16_t) ((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz * 25));
      0000A0 1E 0F            [ 2]  166 	ldw	x, (0x0f, sp)
      0000A2 89               [ 2]  167 	pushw	x
      0000A3 1E 0F            [ 2]  168 	ldw	x, (0x0f, sp)
      0000A5 89               [ 2]  169 	pushw	x
      0000A6 4B 19            [ 1]  170 	push	#0x19
      0000A8 5F               [ 1]  171 	clrw	x
      0000A9 89               [ 2]  172 	pushw	x
      0000AA 4B 00            [ 1]  173 	push	#0x00
      0000AC CDr00r00         [ 4]  174 	call	__mullong
      0000AF 5B 08            [ 2]  175 	addw	sp, #8
      0000B1 9F               [ 1]  176 	ld	a, xl
      0000B2 88               [ 1]  177 	push	a
      0000B3 9E               [ 1]  178 	ld	a, xh
      0000B4 88               [ 1]  179 	push	a
      0000B5 90 89            [ 2]  180 	pushw	y
      0000B7 1E 0D            [ 2]  181 	ldw	x, (0x0d, sp)
      0000B9 89               [ 2]  182 	pushw	x
      0000BA 1E 0D            [ 2]  183 	ldw	x, (0x0d, sp)
      0000BC 89               [ 2]  184 	pushw	x
      0000BD CDr00r00         [ 4]  185 	call	__divulong
      0000C0 5B 08            [ 2]  186 	addw	sp, #8
      0000C2 1F 01            [ 2]  187 	ldw	(0x01, sp), x
                                    188 ;	libstm8s/src/stm8s_i2c.c: 143: tmpccrh |= I2C_CCRH_DUTY;
      0000C4 A6 C0            [ 1]  189 	ld	a, #0xc0
      0000C6 6B 03            [ 1]  190 	ld	(0x03, sp), a
      0000C8                        191 00103$:
                                    192 ;	libstm8s/src/stm8s_i2c.c: 147: if (result < (uint16_t)0x01)
      0000C8 1E 01            [ 2]  193 	ldw	x, (0x01, sp)
      0000CA A3 00 01         [ 2]  194 	cpw	x, #0x0001
      0000CD 24 05            [ 1]  195 	jrnc	00105$
                                    196 ;	libstm8s/src/stm8s_i2c.c: 150: result = (uint16_t)0x0001;
      0000CF AE 00 01         [ 2]  197 	ldw	x, #0x0001
      0000D2 1F 01            [ 2]  198 	ldw	(0x01, sp), x
      0000D4                        199 00105$:
                                    200 ;	libstm8s/src/stm8s_i2c.c: 156: tmpval = ((InputClockFrequencyMHz * 3) / 10) + 1;
      0000D4 7B 16            [ 1]  201 	ld	a, (0x16, sp)
      0000D6 97               [ 1]  202 	ld	xl, a
      0000D7 A6 03            [ 1]  203 	ld	a, #0x03
      0000D9 42               [ 4]  204 	mul	x, a
      0000DA 4B 0A            [ 1]  205 	push	#0x0a
      0000DC 4B 00            [ 1]  206 	push	#0x00
      0000DE 89               [ 2]  207 	pushw	x
      0000DF CDr00r00         [ 4]  208 	call	__divsint
      0000E2 5B 04            [ 2]  209 	addw	sp, #4
      0000E4 5C               [ 2]  210 	incw	x
      0000E5 9F               [ 1]  211 	ld	a, xl
                                    212 ;	libstm8s/src/stm8s_i2c.c: 157: I2C->TRISER = (uint8_t)tmpval;
      0000E6 AE 52 1D         [ 2]  213 	ldw	x, #0x521d
      0000E9 F7               [ 1]  214 	ld	(x), a
      0000EA 20 2A            [ 2]  215 	jra	00110$
      0000EC                        216 00109$:
                                    217 ;	libstm8s/src/stm8s_i2c.c: 164: result = (uint16_t)((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz << (uint8_t)1));
      0000EC 16 0F            [ 2]  218 	ldw	y, (0x0f, sp)
      0000EE 1E 0D            [ 2]  219 	ldw	x, (0x0d, sp)
      0000F0 90 58            [ 2]  220 	sllw	y
      0000F2 59               [ 2]  221 	rlcw	x
      0000F3 90 89            [ 2]  222 	pushw	y
      0000F5 89               [ 2]  223 	pushw	x
      0000F6 1E 0D            [ 2]  224 	ldw	x, (0x0d, sp)
      0000F8 89               [ 2]  225 	pushw	x
      0000F9 1E 0D            [ 2]  226 	ldw	x, (0x0d, sp)
      0000FB 89               [ 2]  227 	pushw	x
      0000FC CDr00r00         [ 4]  228 	call	__divulong
      0000FF 5B 08            [ 2]  229 	addw	sp, #8
      000101 1F 01            [ 2]  230 	ldw	(0x01, sp), x
                                    231 ;	libstm8s/src/stm8s_i2c.c: 167: if (result < (uint16_t)0x0004)
      000103 1E 01            [ 2]  232 	ldw	x, (0x01, sp)
      000105 A3 00 04         [ 2]  233 	cpw	x, #0x0004
      000108 24 05            [ 1]  234 	jrnc	00107$
                                    235 ;	libstm8s/src/stm8s_i2c.c: 170: result = (uint16_t)0x0004;
      00010A AE 00 04         [ 2]  236 	ldw	x, #0x0004
      00010D 1F 01            [ 2]  237 	ldw	(0x01, sp), x
      00010F                        238 00107$:
                                    239 ;	libstm8s/src/stm8s_i2c.c: 176: I2C->TRISER = (uint8_t)(InputClockFrequencyMHz + (uint8_t)1);
      00010F 7B 16            [ 1]  240 	ld	a, (0x16, sp)
      000111 4C               [ 1]  241 	inc	a
      000112 AE 52 1D         [ 2]  242 	ldw	x, #0x521d
      000115 F7               [ 1]  243 	ld	(x), a
      000116                        244 00110$:
                                    245 ;	libstm8s/src/stm8s_i2c.c: 181: I2C->CCRL = (uint8_t)result;
      000116 7B 02            [ 1]  246 	ld	a, (0x02, sp)
      000118 AE 52 1B         [ 2]  247 	ldw	x, #0x521b
      00011B F7               [ 1]  248 	ld	(x), a
                                    249 ;	libstm8s/src/stm8s_i2c.c: 182: I2C->CCRH = (uint8_t)((uint8_t)((uint8_t)(result >> 8) & I2C_CCRH_CCR) | tmpccrh);
      00011C 7B 01            [ 1]  250 	ld	a, (0x01, sp)
      00011E 0F 05            [ 1]  251 	clr	(0x05, sp)
      000120 A4 0F            [ 1]  252 	and	a, #0x0f
      000122 1A 03            [ 1]  253 	or	a, (0x03, sp)
      000124 AE 52 1C         [ 2]  254 	ldw	x, #0x521c
      000127 F7               [ 1]  255 	ld	(x), a
                                    256 ;	libstm8s/src/stm8s_i2c.c: 185: I2C->CR1 |= I2C_CR1_PE;
      000128 72 10 52 10      [ 1]  257 	bset	0x5210, #0
                                    258 ;	libstm8s/src/stm8s_i2c.c: 188: I2C_AcknowledgeConfig(Ack);
      00012C 7B 14            [ 1]  259 	ld	a, (0x14, sp)
      00012E 88               [ 1]  260 	push	a
      00012F CDr01rB9         [ 4]  261 	call	_I2C_AcknowledgeConfig
      000132 84               [ 1]  262 	pop	a
                                    263 ;	libstm8s/src/stm8s_i2c.c: 191: I2C->OARL = (uint8_t)(OwnAddress);
      000133 7B 12            [ 1]  264 	ld	a, (0x12, sp)
      000135 AE 52 13         [ 2]  265 	ldw	x, #0x5213
      000138 F7               [ 1]  266 	ld	(x), a
                                    267 ;	libstm8s/src/stm8s_i2c.c: 192: I2C->OARH = (uint8_t)((uint8_t)(AddMode | I2C_OARH_ADDCONF) |
      000139 7B 15            [ 1]  268 	ld	a, (0x15, sp)
      00013B AA 40            [ 1]  269 	or	a, #0x40
      00013D 6B 04            [ 1]  270 	ld	(0x04, sp), a
                                    271 ;	libstm8s/src/stm8s_i2c.c: 193: (uint8_t)((OwnAddress & (uint16_t)0x0300) >> (uint8_t)7));
      00013F 4F               [ 1]  272 	clr	a
      000140 97               [ 1]  273 	ld	xl, a
      000141 7B 11            [ 1]  274 	ld	a, (0x11, sp)
      000143 A4 03            [ 1]  275 	and	a, #0x03
      000145 95               [ 1]  276 	ld	xh, a
      000146 A6 80            [ 1]  277 	ld	a, #0x80
      000148 62               [ 2]  278 	div	x, a
      000149 9F               [ 1]  279 	ld	a, xl
      00014A 1A 04            [ 1]  280 	or	a, (0x04, sp)
      00014C AE 52 14         [ 2]  281 	ldw	x, #0x5214
      00014F F7               [ 1]  282 	ld	(x), a
      000150 5B 0A            [ 2]  283 	addw	sp, #10
      000152 81               [ 4]  284 	ret
                                    285 ;	libstm8s/src/stm8s_i2c.c: 202: void I2C_Cmd(FunctionalState NewState)
                                    286 ;	-----------------------------------------
                                    287 ;	 function I2C_Cmd
                                    288 ;	-----------------------------------------
      000153                        289 _I2C_Cmd:
                                    290 ;	libstm8s/src/stm8s_i2c.c: 207: if (NewState != DISABLE)
      000153 0D 03            [ 1]  291 	tnz	(0x03, sp)
      000155 27 06            [ 1]  292 	jreq	00102$
                                    293 ;	libstm8s/src/stm8s_i2c.c: 210: I2C->CR1 |= I2C_CR1_PE;
      000157 72 10 52 10      [ 1]  294 	bset	0x5210, #0
      00015B 20 04            [ 2]  295 	jra	00104$
      00015D                        296 00102$:
                                    297 ;	libstm8s/src/stm8s_i2c.c: 215: I2C->CR1 &= (uint8_t)(~I2C_CR1_PE);
      00015D 72 11 52 10      [ 1]  298 	bres	0x5210, #0
      000161                        299 00104$:
      000161 81               [ 4]  300 	ret
                                    301 ;	libstm8s/src/stm8s_i2c.c: 225: void I2C_GeneralCallCmd(FunctionalState NewState)
                                    302 ;	-----------------------------------------
                                    303 ;	 function I2C_GeneralCallCmd
                                    304 ;	-----------------------------------------
      000162                        305 _I2C_GeneralCallCmd:
                                    306 ;	libstm8s/src/stm8s_i2c.c: 230: if (NewState != DISABLE)
      000162 0D 03            [ 1]  307 	tnz	(0x03, sp)
      000164 27 09            [ 1]  308 	jreq	00102$
                                    309 ;	libstm8s/src/stm8s_i2c.c: 233: I2C->CR1 |= I2C_CR1_ENGC;
      000166 AE 52 10         [ 2]  310 	ldw	x, #0x5210
      000169 F6               [ 1]  311 	ld	a, (x)
      00016A AA 40            [ 1]  312 	or	a, #0x40
      00016C F7               [ 1]  313 	ld	(x), a
      00016D 20 07            [ 2]  314 	jra	00104$
      00016F                        315 00102$:
                                    316 ;	libstm8s/src/stm8s_i2c.c: 238: I2C->CR1 &= (uint8_t)(~I2C_CR1_ENGC);
      00016F AE 52 10         [ 2]  317 	ldw	x, #0x5210
      000172 F6               [ 1]  318 	ld	a, (x)
      000173 A4 BF            [ 1]  319 	and	a, #0xbf
      000175 F7               [ 1]  320 	ld	(x), a
      000176                        321 00104$:
      000176 81               [ 4]  322 	ret
                                    323 ;	libstm8s/src/stm8s_i2c.c: 250: void I2C_GenerateSTART(FunctionalState NewState)
                                    324 ;	-----------------------------------------
                                    325 ;	 function I2C_GenerateSTART
                                    326 ;	-----------------------------------------
      000177                        327 _I2C_GenerateSTART:
                                    328 ;	libstm8s/src/stm8s_i2c.c: 255: if (NewState != DISABLE)
      000177 0D 03            [ 1]  329 	tnz	(0x03, sp)
      000179 27 06            [ 1]  330 	jreq	00102$
                                    331 ;	libstm8s/src/stm8s_i2c.c: 258: I2C->CR2 |= I2C_CR2_START;
      00017B 72 10 52 11      [ 1]  332 	bset	0x5211, #0
      00017F 20 04            [ 2]  333 	jra	00104$
      000181                        334 00102$:
                                    335 ;	libstm8s/src/stm8s_i2c.c: 263: I2C->CR2 &= (uint8_t)(~I2C_CR2_START);
      000181 72 11 52 11      [ 1]  336 	bres	0x5211, #0
      000185                        337 00104$:
      000185 81               [ 4]  338 	ret
                                    339 ;	libstm8s/src/stm8s_i2c.c: 273: void I2C_GenerateSTOP(FunctionalState NewState)
                                    340 ;	-----------------------------------------
                                    341 ;	 function I2C_GenerateSTOP
                                    342 ;	-----------------------------------------
      000186                        343 _I2C_GenerateSTOP:
                                    344 ;	libstm8s/src/stm8s_i2c.c: 278: if (NewState != DISABLE)
      000186 0D 03            [ 1]  345 	tnz	(0x03, sp)
      000188 27 09            [ 1]  346 	jreq	00102$
                                    347 ;	libstm8s/src/stm8s_i2c.c: 281: I2C->CR2 |= I2C_CR2_STOP;
      00018A AE 52 11         [ 2]  348 	ldw	x, #0x5211
      00018D F6               [ 1]  349 	ld	a, (x)
      00018E AA 02            [ 1]  350 	or	a, #0x02
      000190 F7               [ 1]  351 	ld	(x), a
      000191 20 07            [ 2]  352 	jra	00104$
      000193                        353 00102$:
                                    354 ;	libstm8s/src/stm8s_i2c.c: 286: I2C->CR2 &= (uint8_t)(~I2C_CR2_STOP);
      000193 AE 52 11         [ 2]  355 	ldw	x, #0x5211
      000196 F6               [ 1]  356 	ld	a, (x)
      000197 A4 FD            [ 1]  357 	and	a, #0xfd
      000199 F7               [ 1]  358 	ld	(x), a
      00019A                        359 00104$:
      00019A 81               [ 4]  360 	ret
                                    361 ;	libstm8s/src/stm8s_i2c.c: 296: void I2C_SoftwareResetCmd(FunctionalState NewState)
                                    362 ;	-----------------------------------------
                                    363 ;	 function I2C_SoftwareResetCmd
                                    364 ;	-----------------------------------------
      00019B                        365 _I2C_SoftwareResetCmd:
                                    366 ;	libstm8s/src/stm8s_i2c.c: 301: if (NewState != DISABLE)
      00019B 0D 03            [ 1]  367 	tnz	(0x03, sp)
      00019D 27 06            [ 1]  368 	jreq	00102$
                                    369 ;	libstm8s/src/stm8s_i2c.c: 304: I2C->CR2 |= I2C_CR2_SWRST;
      00019F 72 1E 52 11      [ 1]  370 	bset	0x5211, #7
      0001A3 20 04            [ 2]  371 	jra	00104$
      0001A5                        372 00102$:
                                    373 ;	libstm8s/src/stm8s_i2c.c: 309: I2C->CR2 &= (uint8_t)(~I2C_CR2_SWRST);
      0001A5 72 1F 52 11      [ 1]  374 	bres	0x5211, #7
      0001A9                        375 00104$:
      0001A9 81               [ 4]  376 	ret
                                    377 ;	libstm8s/src/stm8s_i2c.c: 320: void I2C_StretchClockCmd(FunctionalState NewState)
                                    378 ;	-----------------------------------------
                                    379 ;	 function I2C_StretchClockCmd
                                    380 ;	-----------------------------------------
      0001AA                        381 _I2C_StretchClockCmd:
                                    382 ;	libstm8s/src/stm8s_i2c.c: 325: if (NewState != DISABLE)
      0001AA 0D 03            [ 1]  383 	tnz	(0x03, sp)
      0001AC 27 06            [ 1]  384 	jreq	00102$
                                    385 ;	libstm8s/src/stm8s_i2c.c: 328: I2C->CR1 &= (uint8_t)(~I2C_CR1_NOSTRETCH);
      0001AE 72 1F 52 10      [ 1]  386 	bres	0x5210, #7
      0001B2 20 04            [ 2]  387 	jra	00104$
      0001B4                        388 00102$:
                                    389 ;	libstm8s/src/stm8s_i2c.c: 334: I2C->CR1 |= I2C_CR1_NOSTRETCH;
      0001B4 72 1E 52 10      [ 1]  390 	bset	0x5210, #7
      0001B8                        391 00104$:
      0001B8 81               [ 4]  392 	ret
                                    393 ;	libstm8s/src/stm8s_i2c.c: 345: void I2C_AcknowledgeConfig(I2C_Ack_TypeDef Ack)
                                    394 ;	-----------------------------------------
                                    395 ;	 function I2C_AcknowledgeConfig
                                    396 ;	-----------------------------------------
      0001B9                        397 _I2C_AcknowledgeConfig:
                                    398 ;	libstm8s/src/stm8s_i2c.c: 350: if (Ack == I2C_ACK_NONE)
      0001B9 0D 03            [ 1]  399 	tnz	(0x03, sp)
      0001BB 26 09            [ 1]  400 	jrne	00105$
                                    401 ;	libstm8s/src/stm8s_i2c.c: 353: I2C->CR2 &= (uint8_t)(~I2C_CR2_ACK);
      0001BD AE 52 11         [ 2]  402 	ldw	x, #0x5211
      0001C0 F6               [ 1]  403 	ld	a, (x)
      0001C1 A4 FB            [ 1]  404 	and	a, #0xfb
      0001C3 F7               [ 1]  405 	ld	(x), a
      0001C4 20 1D            [ 2]  406 	jra	00107$
      0001C6                        407 00105$:
                                    408 ;	libstm8s/src/stm8s_i2c.c: 358: I2C->CR2 |= I2C_CR2_ACK;
      0001C6 AE 52 11         [ 2]  409 	ldw	x, #0x5211
      0001C9 F6               [ 1]  410 	ld	a, (x)
      0001CA AA 04            [ 1]  411 	or	a, #0x04
      0001CC F7               [ 1]  412 	ld	(x), a
                                    413 ;	libstm8s/src/stm8s_i2c.c: 360: if (Ack == I2C_ACK_CURR)
      0001CD 7B 03            [ 1]  414 	ld	a, (0x03, sp)
      0001CF A1 01            [ 1]  415 	cp	a, #0x01
      0001D1 26 09            [ 1]  416 	jrne	00102$
                                    417 ;	libstm8s/src/stm8s_i2c.c: 363: I2C->CR2 &= (uint8_t)(~I2C_CR2_POS);
      0001D3 AE 52 11         [ 2]  418 	ldw	x, #0x5211
      0001D6 F6               [ 1]  419 	ld	a, (x)
      0001D7 A4 F7            [ 1]  420 	and	a, #0xf7
      0001D9 F7               [ 1]  421 	ld	(x), a
      0001DA 20 07            [ 2]  422 	jra	00107$
      0001DC                        423 00102$:
                                    424 ;	libstm8s/src/stm8s_i2c.c: 368: I2C->CR2 |= I2C_CR2_POS;
      0001DC AE 52 11         [ 2]  425 	ldw	x, #0x5211
      0001DF F6               [ 1]  426 	ld	a, (x)
      0001E0 AA 08            [ 1]  427 	or	a, #0x08
      0001E2 F7               [ 1]  428 	ld	(x), a
      0001E3                        429 00107$:
      0001E3 81               [ 4]  430 	ret
                                    431 ;	libstm8s/src/stm8s_i2c.c: 381: void I2C_ITConfig(I2C_IT_TypeDef I2C_IT, FunctionalState NewState)
                                    432 ;	-----------------------------------------
                                    433 ;	 function I2C_ITConfig
                                    434 ;	-----------------------------------------
      0001E4                        435 _I2C_ITConfig:
      0001E4 88               [ 1]  436 	push	a
                                    437 ;	libstm8s/src/stm8s_i2c.c: 387: if (NewState != DISABLE)
      0001E5 0D 05            [ 1]  438 	tnz	(0x05, sp)
      0001E7 27 0C            [ 1]  439 	jreq	00102$
                                    440 ;	libstm8s/src/stm8s_i2c.c: 390: I2C->ITR |= (uint8_t)I2C_IT;
      0001E9 AE 52 1A         [ 2]  441 	ldw	x, #0x521a
      0001EC F6               [ 1]  442 	ld	a, (x)
      0001ED 1A 04            [ 1]  443 	or	a, (0x04, sp)
      0001EF AE 52 1A         [ 2]  444 	ldw	x, #0x521a
      0001F2 F7               [ 1]  445 	ld	(x), a
      0001F3 20 0F            [ 2]  446 	jra	00104$
      0001F5                        447 00102$:
                                    448 ;	libstm8s/src/stm8s_i2c.c: 395: I2C->ITR &= (uint8_t)(~(uint8_t)I2C_IT);
      0001F5 AE 52 1A         [ 2]  449 	ldw	x, #0x521a
      0001F8 F6               [ 1]  450 	ld	a, (x)
      0001F9 6B 01            [ 1]  451 	ld	(0x01, sp), a
      0001FB 7B 04            [ 1]  452 	ld	a, (0x04, sp)
      0001FD 43               [ 1]  453 	cpl	a
      0001FE 14 01            [ 1]  454 	and	a, (0x01, sp)
      000200 AE 52 1A         [ 2]  455 	ldw	x, #0x521a
      000203 F7               [ 1]  456 	ld	(x), a
      000204                        457 00104$:
      000204 84               [ 1]  458 	pop	a
      000205 81               [ 4]  459 	ret
                                    460 ;	libstm8s/src/stm8s_i2c.c: 405: void I2C_FastModeDutyCycleConfig(I2C_DutyCycle_TypeDef I2C_DutyCycle)
                                    461 ;	-----------------------------------------
                                    462 ;	 function I2C_FastModeDutyCycleConfig
                                    463 ;	-----------------------------------------
      000206                        464 _I2C_FastModeDutyCycleConfig:
                                    465 ;	libstm8s/src/stm8s_i2c.c: 410: if (I2C_DutyCycle == I2C_DUTYCYCLE_16_9)
      000206 7B 03            [ 1]  466 	ld	a, (0x03, sp)
      000208 A1 40            [ 1]  467 	cp	a, #0x40
      00020A 26 09            [ 1]  468 	jrne	00102$
                                    469 ;	libstm8s/src/stm8s_i2c.c: 413: I2C->CCRH |= I2C_CCRH_DUTY;
      00020C AE 52 1C         [ 2]  470 	ldw	x, #0x521c
      00020F F6               [ 1]  471 	ld	a, (x)
      000210 AA 40            [ 1]  472 	or	a, #0x40
      000212 F7               [ 1]  473 	ld	(x), a
      000213 20 07            [ 2]  474 	jra	00104$
      000215                        475 00102$:
                                    476 ;	libstm8s/src/stm8s_i2c.c: 418: I2C->CCRH &= (uint8_t)(~I2C_CCRH_DUTY);
      000215 AE 52 1C         [ 2]  477 	ldw	x, #0x521c
      000218 F6               [ 1]  478 	ld	a, (x)
      000219 A4 BF            [ 1]  479 	and	a, #0xbf
      00021B F7               [ 1]  480 	ld	(x), a
      00021C                        481 00104$:
      00021C 81               [ 4]  482 	ret
                                    483 ;	libstm8s/src/stm8s_i2c.c: 427: uint8_t I2C_ReceiveData(void)
                                    484 ;	-----------------------------------------
                                    485 ;	 function I2C_ReceiveData
                                    486 ;	-----------------------------------------
      00021D                        487 _I2C_ReceiveData:
                                    488 ;	libstm8s/src/stm8s_i2c.c: 430: return ((uint8_t)I2C->DR);
      00021D AE 52 16         [ 2]  489 	ldw	x, #0x5216
      000220 F6               [ 1]  490 	ld	a, (x)
      000221 81               [ 4]  491 	ret
                                    492 ;	libstm8s/src/stm8s_i2c.c: 440: void I2C_Send7bitAddress(uint8_t Address, I2C_Direction_TypeDef Direction)
                                    493 ;	-----------------------------------------
                                    494 ;	 function I2C_Send7bitAddress
                                    495 ;	-----------------------------------------
      000222                        496 _I2C_Send7bitAddress:
                                    497 ;	libstm8s/src/stm8s_i2c.c: 447: Address &= (uint8_t)0xFE;
      000222 7B 03            [ 1]  498 	ld	a, (0x03, sp)
      000224 A4 FE            [ 1]  499 	and	a, #0xfe
      000226 6B 03            [ 1]  500 	ld	(0x03, sp), a
                                    501 ;	libstm8s/src/stm8s_i2c.c: 450: I2C->DR = (uint8_t)(Address | (uint8_t)Direction);
      000228 7B 03            [ 1]  502 	ld	a, (0x03, sp)
      00022A 1A 04            [ 1]  503 	or	a, (0x04, sp)
      00022C AE 52 16         [ 2]  504 	ldw	x, #0x5216
      00022F F7               [ 1]  505 	ld	(x), a
      000230 81               [ 4]  506 	ret
                                    507 ;	libstm8s/src/stm8s_i2c.c: 458: void I2C_SendData(uint8_t Data)
                                    508 ;	-----------------------------------------
                                    509 ;	 function I2C_SendData
                                    510 ;	-----------------------------------------
      000231                        511 _I2C_SendData:
                                    512 ;	libstm8s/src/stm8s_i2c.c: 461: I2C->DR = Data;
      000231 AE 52 16         [ 2]  513 	ldw	x, #0x5216
      000234 7B 03            [ 1]  514 	ld	a, (0x03, sp)
      000236 F7               [ 1]  515 	ld	(x), a
      000237 81               [ 4]  516 	ret
                                    517 ;	libstm8s/src/stm8s_i2c.c: 578: ErrorStatus I2C_CheckEvent(I2C_Event_TypeDef I2C_Event)
                                    518 ;	-----------------------------------------
                                    519 ;	 function I2C_CheckEvent
                                    520 ;	-----------------------------------------
      000238                        521 _I2C_CheckEvent:
      000238 52 0A            [ 2]  522 	sub	sp, #10
                                    523 ;	libstm8s/src/stm8s_i2c.c: 580: __IO uint16_t lastevent = 0x00;
      00023A 5F               [ 1]  524 	clrw	x
      00023B 1F 01            [ 2]  525 	ldw	(0x01, sp), x
                                    526 ;	libstm8s/src/stm8s_i2c.c: 588: if (I2C_Event == I2C_EVENT_SLAVE_ACK_FAILURE)
      00023D 1E 0D            [ 2]  527 	ldw	x, (0x0d, sp)
      00023F A3 00 04         [ 2]  528 	cpw	x, #0x0004
      000242 26 0C            [ 1]  529 	jrne	00102$
                                    530 ;	libstm8s/src/stm8s_i2c.c: 590: lastevent = I2C->SR2 & I2C_SR2_AF;
      000244 AE 52 18         [ 2]  531 	ldw	x, #0x5218
      000247 F6               [ 1]  532 	ld	a, (x)
      000248 A4 04            [ 1]  533 	and	a, #0x04
      00024A 5F               [ 1]  534 	clrw	x
      00024B 97               [ 1]  535 	ld	xl, a
      00024C 1F 01            [ 2]  536 	ldw	(0x01, sp), x
      00024E 20 1E            [ 2]  537 	jra	00103$
      000250                        538 00102$:
                                    539 ;	libstm8s/src/stm8s_i2c.c: 594: flag1 = I2C->SR1;
      000250 AE 52 17         [ 2]  540 	ldw	x, #0x5217
      000253 F6               [ 1]  541 	ld	a, (x)
                                    542 ;	libstm8s/src/stm8s_i2c.c: 595: flag2 = I2C->SR3;
      000254 AE 52 19         [ 2]  543 	ldw	x, #0x5219
      000257 88               [ 1]  544 	push	a
      000258 F6               [ 1]  545 	ld	a, (x)
      000259 95               [ 1]  546 	ld	xh, a
      00025A 84               [ 1]  547 	pop	a
                                    548 ;	libstm8s/src/stm8s_i2c.c: 596: lastevent = ((uint16_t)((uint16_t)flag2 << (uint16_t)8) | (uint16_t)flag1);
      00025B 0F 05            [ 1]  549 	clr	(0x05, sp)
      00025D 0F 04            [ 1]  550 	clr	(0x04, sp)
      00025F 0F 09            [ 1]  551 	clr	(0x09, sp)
      000261 1A 04            [ 1]  552 	or	a, (0x04, sp)
      000263 6B 08            [ 1]  553 	ld	(0x08, sp), a
      000265 9E               [ 1]  554 	ld	a, xh
      000266 1A 09            [ 1]  555 	or	a, (0x09, sp)
      000268 6B 01            [ 1]  556 	ld	(0x01, sp), a
      00026A 7B 08            [ 1]  557 	ld	a, (0x08, sp)
      00026C 6B 02            [ 1]  558 	ld	(0x02, sp), a
      00026E                        559 00103$:
                                    560 ;	libstm8s/src/stm8s_i2c.c: 599: if (((uint16_t)lastevent & (uint16_t)I2C_Event) == (uint16_t)I2C_Event)
      00026E 7B 02            [ 1]  561 	ld	a, (0x02, sp)
      000270 14 0E            [ 1]  562 	and	a, (0x0e, sp)
      000272 97               [ 1]  563 	ld	xl, a
      000273 7B 01            [ 1]  564 	ld	a, (0x01, sp)
      000275 14 0D            [ 1]  565 	and	a, (0x0d, sp)
      000277 95               [ 1]  566 	ld	xh, a
      000278 13 0D            [ 2]  567 	cpw	x, (0x0d, sp)
      00027A 26 03            [ 1]  568 	jrne	00105$
                                    569 ;	libstm8s/src/stm8s_i2c.c: 602: status = SUCCESS;
      00027C A6 01            [ 1]  570 	ld	a, #0x01
                                    571 ;	libstm8s/src/stm8s_i2c.c: 607: status = ERROR;
      00027E 21                     572 	.byte 0x21
      00027F                        573 00105$:
      00027F 4F               [ 1]  574 	clr	a
      000280                        575 00106$:
                                    576 ;	libstm8s/src/stm8s_i2c.c: 611: return status;
      000280 5B 0A            [ 2]  577 	addw	sp, #10
      000282 81               [ 4]  578 	ret
                                    579 ;	libstm8s/src/stm8s_i2c.c: 628: I2C_Event_TypeDef I2C_GetLastEvent(void)
                                    580 ;	-----------------------------------------
                                    581 ;	 function I2C_GetLastEvent
                                    582 ;	-----------------------------------------
      000283                        583 _I2C_GetLastEvent:
      000283 52 04            [ 2]  584 	sub	sp, #4
                                    585 ;	libstm8s/src/stm8s_i2c.c: 630: __IO uint16_t lastevent = 0;
      000285 5F               [ 1]  586 	clrw	x
      000286 1F 01            [ 2]  587 	ldw	(0x01, sp), x
                                    588 ;	libstm8s/src/stm8s_i2c.c: 634: if ((I2C->SR2 & I2C_SR2_AF) != 0x00)
      000288 AE 52 18         [ 2]  589 	ldw	x, #0x5218
      00028B F6               [ 1]  590 	ld	a, (x)
      00028C A5 04            [ 1]  591 	bcp	a, #0x04
      00028E 27 07            [ 1]  592 	jreq	00102$
                                    593 ;	libstm8s/src/stm8s_i2c.c: 636: lastevent = I2C_EVENT_SLAVE_ACK_FAILURE;
      000290 AE 00 04         [ 2]  594 	ldw	x, #0x0004
      000293 1F 01            [ 2]  595 	ldw	(0x01, sp), x
      000295 20 17            [ 2]  596 	jra	00103$
      000297                        597 00102$:
                                    598 ;	libstm8s/src/stm8s_i2c.c: 641: flag1 = I2C->SR1;
      000297 AE 52 17         [ 2]  599 	ldw	x, #0x5217
      00029A F6               [ 1]  600 	ld	a, (x)
      00029B 5F               [ 1]  601 	clrw	x
      00029C 97               [ 1]  602 	ld	xl, a
      00029D 1F 03            [ 2]  603 	ldw	(0x03, sp), x
                                    604 ;	libstm8s/src/stm8s_i2c.c: 642: flag2 = I2C->SR3;
      00029F AE 52 19         [ 2]  605 	ldw	x, #0x5219
      0002A2 F6               [ 1]  606 	ld	a, (x)
      0002A3 95               [ 1]  607 	ld	xh, a
      0002A4 4F               [ 1]  608 	clr	a
                                    609 ;	libstm8s/src/stm8s_i2c.c: 645: lastevent = ((uint16_t)((uint16_t)flag2 << 8) | (uint16_t)flag1);
      0002A5 4F               [ 1]  610 	clr	a
      0002A6 1A 04            [ 1]  611 	or	a, (0x04, sp)
      0002A8 02               [ 1]  612 	rlwa	x
      0002A9 1A 03            [ 1]  613 	or	a, (0x03, sp)
      0002AB 95               [ 1]  614 	ld	xh, a
      0002AC 1F 01            [ 2]  615 	ldw	(0x01, sp), x
      0002AE                        616 00103$:
                                    617 ;	libstm8s/src/stm8s_i2c.c: 648: return (I2C_Event_TypeDef)lastevent;
      0002AE 1E 01            [ 2]  618 	ldw	x, (0x01, sp)
      0002B0 5B 04            [ 2]  619 	addw	sp, #4
      0002B2 81               [ 4]  620 	ret
                                    621 ;	libstm8s/src/stm8s_i2c.c: 679: FlagStatus I2C_GetFlagStatus(I2C_Flag_TypeDef I2C_Flag)
                                    622 ;	-----------------------------------------
                                    623 ;	 function I2C_GetFlagStatus
                                    624 ;	-----------------------------------------
      0002B3                        625 _I2C_GetFlagStatus:
      0002B3 89               [ 2]  626 	pushw	x
                                    627 ;	libstm8s/src/stm8s_i2c.c: 681: uint8_t tempreg = 0;
      0002B4 4F               [ 1]  628 	clr	a
      0002B5 95               [ 1]  629 	ld	xh, a
                                    630 ;	libstm8s/src/stm8s_i2c.c: 689: regindex = (uint8_t)((uint16_t)I2C_Flag >> 8);
      0002B6 7B 05            [ 1]  631 	ld	a, (0x05, sp)
      0002B8 0F 01            [ 1]  632 	clr	(0x01, sp)
                                    633 ;	libstm8s/src/stm8s_i2c.c: 691: switch (regindex)
      0002BA A1 01            [ 1]  634 	cp	a, #0x01
      0002BC 27 0A            [ 1]  635 	jreq	00101$
      0002BE A1 02            [ 1]  636 	cp	a, #0x02
      0002C0 27 0D            [ 1]  637 	jreq	00102$
      0002C2 A1 03            [ 1]  638 	cp	a, #0x03
      0002C4 27 10            [ 1]  639 	jreq	00103$
      0002C6 20 13            [ 2]  640 	jra	00105$
                                    641 ;	libstm8s/src/stm8s_i2c.c: 694: case 0x01:
      0002C8                        642 00101$:
                                    643 ;	libstm8s/src/stm8s_i2c.c: 695: tempreg = (uint8_t)I2C->SR1;
      0002C8 AE 52 17         [ 2]  644 	ldw	x, #0x5217
      0002CB F6               [ 1]  645 	ld	a, (x)
      0002CC 95               [ 1]  646 	ld	xh, a
                                    647 ;	libstm8s/src/stm8s_i2c.c: 696: break;
      0002CD 20 0C            [ 2]  648 	jra	00105$
                                    649 ;	libstm8s/src/stm8s_i2c.c: 699: case 0x02:
      0002CF                        650 00102$:
                                    651 ;	libstm8s/src/stm8s_i2c.c: 700: tempreg = (uint8_t)I2C->SR2;
      0002CF AE 52 18         [ 2]  652 	ldw	x, #0x5218
      0002D2 F6               [ 1]  653 	ld	a, (x)
      0002D3 95               [ 1]  654 	ld	xh, a
                                    655 ;	libstm8s/src/stm8s_i2c.c: 701: break;
      0002D4 20 05            [ 2]  656 	jra	00105$
                                    657 ;	libstm8s/src/stm8s_i2c.c: 704: case 0x03:
      0002D6                        658 00103$:
                                    659 ;	libstm8s/src/stm8s_i2c.c: 705: tempreg = (uint8_t)I2C->SR3;
      0002D6 AE 52 19         [ 2]  660 	ldw	x, #0x5219
      0002D9 F6               [ 1]  661 	ld	a, (x)
      0002DA 95               [ 1]  662 	ld	xh, a
                                    663 ;	libstm8s/src/stm8s_i2c.c: 710: }
      0002DB                        664 00105$:
                                    665 ;	libstm8s/src/stm8s_i2c.c: 713: if ((tempreg & (uint8_t)I2C_Flag ) != 0)
      0002DB 7B 06            [ 1]  666 	ld	a, (0x06, sp)
      0002DD 89               [ 2]  667 	pushw	x
      0002DE 14 01            [ 1]  668 	and	a, (1, sp)
      0002E0 85               [ 2]  669 	popw	x
      0002E1 4D               [ 1]  670 	tnz	a
      0002E2 27 03            [ 1]  671 	jreq	00107$
                                    672 ;	libstm8s/src/stm8s_i2c.c: 716: bitstatus = SET;
      0002E4 A6 01            [ 1]  673 	ld	a, #0x01
                                    674 ;	libstm8s/src/stm8s_i2c.c: 721: bitstatus = RESET;
      0002E6 21                     675 	.byte 0x21
      0002E7                        676 00107$:
      0002E7 4F               [ 1]  677 	clr	a
      0002E8                        678 00108$:
                                    679 ;	libstm8s/src/stm8s_i2c.c: 724: return bitstatus;
      0002E8 85               [ 2]  680 	popw	x
      0002E9 81               [ 4]  681 	ret
                                    682 ;	libstm8s/src/stm8s_i2c.c: 759: void I2C_ClearFlag(I2C_Flag_TypeDef I2C_FLAG)
                                    683 ;	-----------------------------------------
                                    684 ;	 function I2C_ClearFlag
                                    685 ;	-----------------------------------------
      0002EA                        686 _I2C_ClearFlag:
                                    687 ;	libstm8s/src/stm8s_i2c.c: 766: flagpos = (uint16_t)I2C_FLAG & FLAG_Mask;
      0002EA 7B 04            [ 1]  688 	ld	a, (0x04, sp)
      0002EC 97               [ 1]  689 	ld	xl, a
      0002ED 4F               [ 1]  690 	clr	a
      0002EE 95               [ 1]  691 	ld	xh, a
                                    692 ;	libstm8s/src/stm8s_i2c.c: 768: I2C->SR2 = (uint8_t)((uint16_t)(~flagpos));
      0002EF 53               [ 2]  693 	cplw	x
      0002F0 9F               [ 1]  694 	ld	a, xl
      0002F1 AE 52 18         [ 2]  695 	ldw	x, #0x5218
      0002F4 F7               [ 1]  696 	ld	(x), a
      0002F5 81               [ 4]  697 	ret
                                    698 ;	libstm8s/src/stm8s_i2c.c: 791: ITStatus I2C_GetITStatus(I2C_ITPendingBit_TypeDef I2C_ITPendingBit)
                                    699 ;	-----------------------------------------
                                    700 ;	 function I2C_GetITStatus
                                    701 ;	-----------------------------------------
      0002F6                        702 _I2C_GetITStatus:
      0002F6 52 04            [ 2]  703 	sub	sp, #4
                                    704 ;	libstm8s/src/stm8s_i2c.c: 794: __IO uint8_t enablestatus = 0;
      0002F8 0F 01            [ 1]  705 	clr	(0x01, sp)
                                    706 ;	libstm8s/src/stm8s_i2c.c: 800: tempregister = (uint8_t)( ((uint16_t)((uint16_t)I2C_ITPendingBit & ITEN_Mask)) >> 8);
      0002FA 0F 03            [ 1]  707 	clr	(0x03, sp)
      0002FC 7B 07            [ 1]  708 	ld	a, (0x07, sp)
      0002FE A4 07            [ 1]  709 	and	a, #0x07
      000300 95               [ 1]  710 	ld	xh, a
      000301 4F               [ 1]  711 	clr	a
      000302 4F               [ 1]  712 	clr	a
      000303 97               [ 1]  713 	ld	xl, a
                                    714 ;	libstm8s/src/stm8s_i2c.c: 803: enablestatus = (uint8_t)(I2C->ITR & ( uint8_t)tempregister);
      000304 90 AE 52 1A      [ 2]  715 	ldw	y, #0x521a
      000308 90 F6            [ 1]  716 	ld	a, (y)
      00030A 89               [ 2]  717 	pushw	x
      00030B 14 01            [ 1]  718 	and	a, (1, sp)
      00030D 85               [ 2]  719 	popw	x
      00030E 6B 01            [ 1]  720 	ld	(0x01, sp), a
                                    721 ;	libstm8s/src/stm8s_i2c.c: 805: if ((uint16_t)((uint16_t)I2C_ITPendingBit & REGISTER_Mask) == REGISTER_SR1_Index)
      000310 4F               [ 1]  722 	clr	a
      000311 97               [ 1]  723 	ld	xl, a
      000312 7B 07            [ 1]  724 	ld	a, (0x07, sp)
      000314 A4 30            [ 1]  725 	and	a, #0x30
      000316 95               [ 1]  726 	ld	xh, a
                                    727 ;	libstm8s/src/stm8s_i2c.c: 808: if (((I2C->SR1 & (uint8_t)I2C_ITPendingBit) != RESET) && enablestatus)
      000317 7B 08            [ 1]  728 	ld	a, (0x08, sp)
      000319 6B 04            [ 1]  729 	ld	(0x04, sp), a
                                    730 ;	libstm8s/src/stm8s_i2c.c: 805: if ((uint16_t)((uint16_t)I2C_ITPendingBit & REGISTER_Mask) == REGISTER_SR1_Index)
      00031B A3 01 00         [ 2]  731 	cpw	x, #0x0100
      00031E 26 14            [ 1]  732 	jrne	00110$
                                    733 ;	libstm8s/src/stm8s_i2c.c: 808: if (((I2C->SR1 & (uint8_t)I2C_ITPendingBit) != RESET) && enablestatus)
      000320 AE 52 17         [ 2]  734 	ldw	x, #0x5217
      000323 F6               [ 1]  735 	ld	a, (x)
      000324 14 04            [ 1]  736 	and	a, (0x04, sp)
      000326 4D               [ 1]  737 	tnz	a
      000327 27 08            [ 1]  738 	jreq	00102$
      000329 0D 01            [ 1]  739 	tnz	(0x01, sp)
      00032B 27 04            [ 1]  740 	jreq	00102$
                                    741 ;	libstm8s/src/stm8s_i2c.c: 811: bitstatus = SET;
      00032D A6 01            [ 1]  742 	ld	a, #0x01
      00032F 20 14            [ 2]  743 	jra	00111$
      000331                        744 00102$:
                                    745 ;	libstm8s/src/stm8s_i2c.c: 816: bitstatus = RESET;
      000331 4F               [ 1]  746 	clr	a
      000332 20 11            [ 2]  747 	jra	00111$
      000334                        748 00110$:
                                    749 ;	libstm8s/src/stm8s_i2c.c: 822: if (((I2C->SR2 & (uint8_t)I2C_ITPendingBit) != RESET) && enablestatus)
      000334 AE 52 18         [ 2]  750 	ldw	x, #0x5218
      000337 F6               [ 1]  751 	ld	a, (x)
      000338 14 04            [ 1]  752 	and	a, (0x04, sp)
      00033A 4D               [ 1]  753 	tnz	a
      00033B 27 07            [ 1]  754 	jreq	00106$
      00033D 0D 01            [ 1]  755 	tnz	(0x01, sp)
      00033F 27 03            [ 1]  756 	jreq	00106$
                                    757 ;	libstm8s/src/stm8s_i2c.c: 825: bitstatus = SET;
      000341 A6 01            [ 1]  758 	ld	a, #0x01
                                    759 ;	libstm8s/src/stm8s_i2c.c: 830: bitstatus = RESET;
      000343 21                     760 	.byte 0x21
      000344                        761 00106$:
      000344 4F               [ 1]  762 	clr	a
      000345                        763 00111$:
                                    764 ;	libstm8s/src/stm8s_i2c.c: 834: return  bitstatus;
      000345 5B 04            [ 2]  765 	addw	sp, #4
      000347 81               [ 4]  766 	ret
                                    767 ;	libstm8s/src/stm8s_i2c.c: 871: void I2C_ClearITPendingBit(I2C_ITPendingBit_TypeDef I2C_ITPendingBit)
                                    768 ;	-----------------------------------------
                                    769 ;	 function I2C_ClearITPendingBit
                                    770 ;	-----------------------------------------
      000348                        771 _I2C_ClearITPendingBit:
                                    772 ;	libstm8s/src/stm8s_i2c.c: 879: flagpos = (uint16_t)I2C_ITPendingBit & FLAG_Mask;
      000348 7B 04            [ 1]  773 	ld	a, (0x04, sp)
      00034A 97               [ 1]  774 	ld	xl, a
      00034B 4F               [ 1]  775 	clr	a
      00034C 95               [ 1]  776 	ld	xh, a
                                    777 ;	libstm8s/src/stm8s_i2c.c: 882: I2C->SR2 = (uint8_t)((uint16_t)~flagpos);
      00034D 53               [ 2]  778 	cplw	x
      00034E 9F               [ 1]  779 	ld	a, xl
      00034F AE 52 18         [ 2]  780 	ldw	x, #0x5218
      000352 F7               [ 1]  781 	ld	(x), a
      000353 81               [ 4]  782 	ret
                                    783 	.area CODE
                                    784 	.area INITIALIZER
                                    785 	.area CABS (ABS)
