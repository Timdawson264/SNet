                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Fri Sep 20 09:49:52 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module stm8s_tim4
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _TIM4_DeInit
                                     13 	.globl _TIM4_TimeBaseInit
                                     14 	.globl _TIM4_Cmd
                                     15 	.globl _TIM4_ITConfig
                                     16 	.globl _TIM4_UpdateDisableConfig
                                     17 	.globl _TIM4_UpdateRequestConfig
                                     18 	.globl _TIM4_SelectOnePulseMode
                                     19 	.globl _TIM4_PrescalerConfig
                                     20 	.globl _TIM4_ARRPreloadConfig
                                     21 	.globl _TIM4_GenerateEvent
                                     22 	.globl _TIM4_SetCounter
                                     23 	.globl _TIM4_SetAutoreload
                                     24 	.globl _TIM4_GetCounter
                                     25 	.globl _TIM4_GetPrescaler
                                     26 	.globl _TIM4_GetFlagStatus
                                     27 	.globl _TIM4_ClearFlag
                                     28 	.globl _TIM4_GetITStatus
                                     29 	.globl _TIM4_ClearITPendingBit
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DATA
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area INITIALIZED
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DABS (ABS)
                                     42 ;--------------------------------------------------------
                                     43 ; global & static initialisations
                                     44 ;--------------------------------------------------------
                                     45 	.area HOME
                                     46 	.area GSINIT
                                     47 	.area GSFINAL
                                     48 	.area GSINIT
                                     49 ;--------------------------------------------------------
                                     50 ; Home
                                     51 ;--------------------------------------------------------
                                     52 	.area HOME
                                     53 	.area HOME
                                     54 ;--------------------------------------------------------
                                     55 ; code
                                     56 ;--------------------------------------------------------
                                     57 	.area CODE
                                     58 ;	libstm8s/src/stm8s_tim4.c: 49: void TIM4_DeInit(void)
                                     59 ;	-----------------------------------------
                                     60 ;	 function TIM4_DeInit
                                     61 ;	-----------------------------------------
      000000                         62 _TIM4_DeInit:
                                     63 ;	libstm8s/src/stm8s_tim4.c: 51: TIM4->CR1 = TIM4_CR1_RESET_VALUE;
      000000 35 00 53 40      [ 1]   64 	mov	0x5340+0, #0x00
                                     65 ;	libstm8s/src/stm8s_tim4.c: 52: TIM4->IER = TIM4_IER_RESET_VALUE;
      000004 35 00 53 43      [ 1]   66 	mov	0x5343+0, #0x00
                                     67 ;	libstm8s/src/stm8s_tim4.c: 53: TIM4->CNTR = TIM4_CNTR_RESET_VALUE;
      000008 35 00 53 46      [ 1]   68 	mov	0x5346+0, #0x00
                                     69 ;	libstm8s/src/stm8s_tim4.c: 54: TIM4->PSCR = TIM4_PSCR_RESET_VALUE;
      00000C 35 00 53 47      [ 1]   70 	mov	0x5347+0, #0x00
                                     71 ;	libstm8s/src/stm8s_tim4.c: 55: TIM4->ARR = TIM4_ARR_RESET_VALUE;
      000010 35 FF 53 48      [ 1]   72 	mov	0x5348+0, #0xff
                                     73 ;	libstm8s/src/stm8s_tim4.c: 56: TIM4->SR1 = TIM4_SR1_RESET_VALUE;
      000014 35 00 53 44      [ 1]   74 	mov	0x5344+0, #0x00
      000018 81               [ 4]   75 	ret
                                     76 ;	libstm8s/src/stm8s_tim4.c: 65: void TIM4_TimeBaseInit(TIM4_Prescaler_TypeDef TIM4_Prescaler, uint8_t TIM4_Period)
                                     77 ;	-----------------------------------------
                                     78 ;	 function TIM4_TimeBaseInit
                                     79 ;	-----------------------------------------
      000019                         80 _TIM4_TimeBaseInit:
                                     81 ;	libstm8s/src/stm8s_tim4.c: 70: TIM4->PSCR = (uint8_t)(TIM4_Prescaler);
      000019 AE 53 47         [ 2]   82 	ldw	x, #0x5347
      00001C 7B 03            [ 1]   83 	ld	a, (0x03, sp)
      00001E F7               [ 1]   84 	ld	(x), a
                                     85 ;	libstm8s/src/stm8s_tim4.c: 72: TIM4->ARR = (uint8_t)(TIM4_Period);
      00001F AE 53 48         [ 2]   86 	ldw	x, #0x5348
      000022 7B 04            [ 1]   87 	ld	a, (0x04, sp)
      000024 F7               [ 1]   88 	ld	(x), a
      000025 81               [ 4]   89 	ret
                                     90 ;	libstm8s/src/stm8s_tim4.c: 81: void TIM4_Cmd(FunctionalState NewState)
                                     91 ;	-----------------------------------------
                                     92 ;	 function TIM4_Cmd
                                     93 ;	-----------------------------------------
      000026                         94 _TIM4_Cmd:
                                     95 ;	libstm8s/src/stm8s_tim4.c: 87: if (NewState != DISABLE)
      000026 0D 03            [ 1]   96 	tnz	(0x03, sp)
      000028 27 06            [ 1]   97 	jreq	00102$
                                     98 ;	libstm8s/src/stm8s_tim4.c: 89: TIM4->CR1 |= TIM4_CR1_CEN;
      00002A 72 10 53 40      [ 1]   99 	bset	0x5340, #0
      00002E 20 04            [ 2]  100 	jra	00104$
      000030                        101 00102$:
                                    102 ;	libstm8s/src/stm8s_tim4.c: 93: TIM4->CR1 &= (uint8_t)(~TIM4_CR1_CEN);
      000030 72 11 53 40      [ 1]  103 	bres	0x5340, #0
      000034                        104 00104$:
      000034 81               [ 4]  105 	ret
                                    106 ;	libstm8s/src/stm8s_tim4.c: 107: void TIM4_ITConfig(TIM4_IT_TypeDef TIM4_IT, FunctionalState NewState)
                                    107 ;	-----------------------------------------
                                    108 ;	 function TIM4_ITConfig
                                    109 ;	-----------------------------------------
      000035                        110 _TIM4_ITConfig:
      000035 88               [ 1]  111 	push	a
                                    112 ;	libstm8s/src/stm8s_tim4.c: 113: if (NewState != DISABLE)
      000036 0D 05            [ 1]  113 	tnz	(0x05, sp)
      000038 27 0C            [ 1]  114 	jreq	00102$
                                    115 ;	libstm8s/src/stm8s_tim4.c: 116: TIM4->IER |= (uint8_t)TIM4_IT;
      00003A AE 53 43         [ 2]  116 	ldw	x, #0x5343
      00003D F6               [ 1]  117 	ld	a, (x)
      00003E 1A 04            [ 1]  118 	or	a, (0x04, sp)
      000040 AE 53 43         [ 2]  119 	ldw	x, #0x5343
      000043 F7               [ 1]  120 	ld	(x), a
      000044 20 0F            [ 2]  121 	jra	00104$
      000046                        122 00102$:
                                    123 ;	libstm8s/src/stm8s_tim4.c: 121: TIM4->IER &= (uint8_t)(~TIM4_IT);
      000046 AE 53 43         [ 2]  124 	ldw	x, #0x5343
      000049 F6               [ 1]  125 	ld	a, (x)
      00004A 6B 01            [ 1]  126 	ld	(0x01, sp), a
      00004C 7B 04            [ 1]  127 	ld	a, (0x04, sp)
      00004E 43               [ 1]  128 	cpl	a
      00004F 14 01            [ 1]  129 	and	a, (0x01, sp)
      000051 AE 53 43         [ 2]  130 	ldw	x, #0x5343
      000054 F7               [ 1]  131 	ld	(x), a
      000055                        132 00104$:
      000055 84               [ 1]  133 	pop	a
      000056 81               [ 4]  134 	ret
                                    135 ;	libstm8s/src/stm8s_tim4.c: 131: void TIM4_UpdateDisableConfig(FunctionalState NewState)
                                    136 ;	-----------------------------------------
                                    137 ;	 function TIM4_UpdateDisableConfig
                                    138 ;	-----------------------------------------
      000057                        139 _TIM4_UpdateDisableConfig:
                                    140 ;	libstm8s/src/stm8s_tim4.c: 137: if (NewState != DISABLE)
      000057 0D 03            [ 1]  141 	tnz	(0x03, sp)
      000059 27 09            [ 1]  142 	jreq	00102$
                                    143 ;	libstm8s/src/stm8s_tim4.c: 139: TIM4->CR1 |= TIM4_CR1_UDIS;
      00005B AE 53 40         [ 2]  144 	ldw	x, #0x5340
      00005E F6               [ 1]  145 	ld	a, (x)
      00005F AA 02            [ 1]  146 	or	a, #0x02
      000061 F7               [ 1]  147 	ld	(x), a
      000062 20 07            [ 2]  148 	jra	00104$
      000064                        149 00102$:
                                    150 ;	libstm8s/src/stm8s_tim4.c: 143: TIM4->CR1 &= (uint8_t)(~TIM4_CR1_UDIS);
      000064 AE 53 40         [ 2]  151 	ldw	x, #0x5340
      000067 F6               [ 1]  152 	ld	a, (x)
      000068 A4 FD            [ 1]  153 	and	a, #0xfd
      00006A F7               [ 1]  154 	ld	(x), a
      00006B                        155 00104$:
      00006B 81               [ 4]  156 	ret
                                    157 ;	libstm8s/src/stm8s_tim4.c: 155: void TIM4_UpdateRequestConfig(TIM4_UpdateSource_TypeDef TIM4_UpdateSource)
                                    158 ;	-----------------------------------------
                                    159 ;	 function TIM4_UpdateRequestConfig
                                    160 ;	-----------------------------------------
      00006C                        161 _TIM4_UpdateRequestConfig:
                                    162 ;	libstm8s/src/stm8s_tim4.c: 161: if (TIM4_UpdateSource != TIM4_UPDATESOURCE_GLOBAL)
      00006C 0D 03            [ 1]  163 	tnz	(0x03, sp)
      00006E 27 09            [ 1]  164 	jreq	00102$
                                    165 ;	libstm8s/src/stm8s_tim4.c: 163: TIM4->CR1 |= TIM4_CR1_URS;
      000070 AE 53 40         [ 2]  166 	ldw	x, #0x5340
      000073 F6               [ 1]  167 	ld	a, (x)
      000074 AA 04            [ 1]  168 	or	a, #0x04
      000076 F7               [ 1]  169 	ld	(x), a
      000077 20 07            [ 2]  170 	jra	00104$
      000079                        171 00102$:
                                    172 ;	libstm8s/src/stm8s_tim4.c: 167: TIM4->CR1 &= (uint8_t)(~TIM4_CR1_URS);
      000079 AE 53 40         [ 2]  173 	ldw	x, #0x5340
      00007C F6               [ 1]  174 	ld	a, (x)
      00007D A4 FB            [ 1]  175 	and	a, #0xfb
      00007F F7               [ 1]  176 	ld	(x), a
      000080                        177 00104$:
      000080 81               [ 4]  178 	ret
                                    179 ;	libstm8s/src/stm8s_tim4.c: 179: void TIM4_SelectOnePulseMode(TIM4_OPMode_TypeDef TIM4_OPMode)
                                    180 ;	-----------------------------------------
                                    181 ;	 function TIM4_SelectOnePulseMode
                                    182 ;	-----------------------------------------
      000081                        183 _TIM4_SelectOnePulseMode:
                                    184 ;	libstm8s/src/stm8s_tim4.c: 185: if (TIM4_OPMode != TIM4_OPMODE_REPETITIVE)
      000081 0D 03            [ 1]  185 	tnz	(0x03, sp)
      000083 27 09            [ 1]  186 	jreq	00102$
                                    187 ;	libstm8s/src/stm8s_tim4.c: 187: TIM4->CR1 |= TIM4_CR1_OPM;
      000085 AE 53 40         [ 2]  188 	ldw	x, #0x5340
      000088 F6               [ 1]  189 	ld	a, (x)
      000089 AA 08            [ 1]  190 	or	a, #0x08
      00008B F7               [ 1]  191 	ld	(x), a
      00008C 20 07            [ 2]  192 	jra	00104$
      00008E                        193 00102$:
                                    194 ;	libstm8s/src/stm8s_tim4.c: 191: TIM4->CR1 &= (uint8_t)(~TIM4_CR1_OPM);
      00008E AE 53 40         [ 2]  195 	ldw	x, #0x5340
      000091 F6               [ 1]  196 	ld	a, (x)
      000092 A4 F7            [ 1]  197 	and	a, #0xf7
      000094 F7               [ 1]  198 	ld	(x), a
      000095                        199 00104$:
      000095 81               [ 4]  200 	ret
                                    201 ;	libstm8s/src/stm8s_tim4.c: 215: void TIM4_PrescalerConfig(TIM4_Prescaler_TypeDef Prescaler, TIM4_PSCReloadMode_TypeDef TIM4_PSCReloadMode)
                                    202 ;	-----------------------------------------
                                    203 ;	 function TIM4_PrescalerConfig
                                    204 ;	-----------------------------------------
      000096                        205 _TIM4_PrescalerConfig:
                                    206 ;	libstm8s/src/stm8s_tim4.c: 222: TIM4->PSCR = (uint8_t)Prescaler;
      000096 AE 53 47         [ 2]  207 	ldw	x, #0x5347
      000099 7B 03            [ 1]  208 	ld	a, (0x03, sp)
      00009B F7               [ 1]  209 	ld	(x), a
                                    210 ;	libstm8s/src/stm8s_tim4.c: 225: TIM4->EGR = (uint8_t)TIM4_PSCReloadMode;
      00009C AE 53 45         [ 2]  211 	ldw	x, #0x5345
      00009F 7B 04            [ 1]  212 	ld	a, (0x04, sp)
      0000A1 F7               [ 1]  213 	ld	(x), a
      0000A2 81               [ 4]  214 	ret
                                    215 ;	libstm8s/src/stm8s_tim4.c: 234: void TIM4_ARRPreloadConfig(FunctionalState NewState)
                                    216 ;	-----------------------------------------
                                    217 ;	 function TIM4_ARRPreloadConfig
                                    218 ;	-----------------------------------------
      0000A3                        219 _TIM4_ARRPreloadConfig:
                                    220 ;	libstm8s/src/stm8s_tim4.c: 240: if (NewState != DISABLE)
      0000A3 0D 03            [ 1]  221 	tnz	(0x03, sp)
      0000A5 27 06            [ 1]  222 	jreq	00102$
                                    223 ;	libstm8s/src/stm8s_tim4.c: 242: TIM4->CR1 |= TIM4_CR1_ARPE;
      0000A7 72 1E 53 40      [ 1]  224 	bset	0x5340, #7
      0000AB 20 04            [ 2]  225 	jra	00104$
      0000AD                        226 00102$:
                                    227 ;	libstm8s/src/stm8s_tim4.c: 246: TIM4->CR1 &= (uint8_t)(~TIM4_CR1_ARPE);
      0000AD 72 1F 53 40      [ 1]  228 	bres	0x5340, #7
      0000B1                        229 00104$:
      0000B1 81               [ 4]  230 	ret
                                    231 ;	libstm8s/src/stm8s_tim4.c: 257: void TIM4_GenerateEvent(TIM4_EventSource_TypeDef TIM4_EventSource)
                                    232 ;	-----------------------------------------
                                    233 ;	 function TIM4_GenerateEvent
                                    234 ;	-----------------------------------------
      0000B2                        235 _TIM4_GenerateEvent:
                                    236 ;	libstm8s/src/stm8s_tim4.c: 263: TIM4->EGR = (uint8_t)(TIM4_EventSource);
      0000B2 AE 53 45         [ 2]  237 	ldw	x, #0x5345
      0000B5 7B 03            [ 1]  238 	ld	a, (0x03, sp)
      0000B7 F7               [ 1]  239 	ld	(x), a
      0000B8 81               [ 4]  240 	ret
                                    241 ;	libstm8s/src/stm8s_tim4.c: 272: void TIM4_SetCounter(uint8_t Counter)
                                    242 ;	-----------------------------------------
                                    243 ;	 function TIM4_SetCounter
                                    244 ;	-----------------------------------------
      0000B9                        245 _TIM4_SetCounter:
                                    246 ;	libstm8s/src/stm8s_tim4.c: 275: TIM4->CNTR = (uint8_t)(Counter);
      0000B9 AE 53 46         [ 2]  247 	ldw	x, #0x5346
      0000BC 7B 03            [ 1]  248 	ld	a, (0x03, sp)
      0000BE F7               [ 1]  249 	ld	(x), a
      0000BF 81               [ 4]  250 	ret
                                    251 ;	libstm8s/src/stm8s_tim4.c: 284: void TIM4_SetAutoreload(uint8_t Autoreload)
                                    252 ;	-----------------------------------------
                                    253 ;	 function TIM4_SetAutoreload
                                    254 ;	-----------------------------------------
      0000C0                        255 _TIM4_SetAutoreload:
                                    256 ;	libstm8s/src/stm8s_tim4.c: 287: TIM4->ARR = (uint8_t)(Autoreload);
      0000C0 AE 53 48         [ 2]  257 	ldw	x, #0x5348
      0000C3 7B 03            [ 1]  258 	ld	a, (0x03, sp)
      0000C5 F7               [ 1]  259 	ld	(x), a
      0000C6 81               [ 4]  260 	ret
                                    261 ;	libstm8s/src/stm8s_tim4.c: 295: uint8_t TIM4_GetCounter(void)
                                    262 ;	-----------------------------------------
                                    263 ;	 function TIM4_GetCounter
                                    264 ;	-----------------------------------------
      0000C7                        265 _TIM4_GetCounter:
                                    266 ;	libstm8s/src/stm8s_tim4.c: 298: return (uint8_t)(TIM4->CNTR);
      0000C7 AE 53 46         [ 2]  267 	ldw	x, #0x5346
      0000CA F6               [ 1]  268 	ld	a, (x)
      0000CB 81               [ 4]  269 	ret
                                    270 ;	libstm8s/src/stm8s_tim4.c: 306: TIM4_Prescaler_TypeDef TIM4_GetPrescaler(void)
                                    271 ;	-----------------------------------------
                                    272 ;	 function TIM4_GetPrescaler
                                    273 ;	-----------------------------------------
      0000CC                        274 _TIM4_GetPrescaler:
                                    275 ;	libstm8s/src/stm8s_tim4.c: 309: return (TIM4_Prescaler_TypeDef)(TIM4->PSCR);
      0000CC AE 53 47         [ 2]  276 	ldw	x, #0x5347
      0000CF F6               [ 1]  277 	ld	a, (x)
      0000D0 81               [ 4]  278 	ret
                                    279 ;	libstm8s/src/stm8s_tim4.c: 319: FlagStatus TIM4_GetFlagStatus(TIM4_FLAG_TypeDef TIM4_FLAG)
                                    280 ;	-----------------------------------------
                                    281 ;	 function TIM4_GetFlagStatus
                                    282 ;	-----------------------------------------
      0000D1                        283 _TIM4_GetFlagStatus:
                                    284 ;	libstm8s/src/stm8s_tim4.c: 326: if ((TIM4->SR1 & (uint8_t)TIM4_FLAG)  != 0)
      0000D1 AE 53 44         [ 2]  285 	ldw	x, #0x5344
      0000D4 F6               [ 1]  286 	ld	a, (x)
      0000D5 14 03            [ 1]  287 	and	a, (0x03, sp)
      0000D7 4D               [ 1]  288 	tnz	a
      0000D8 27 03            [ 1]  289 	jreq	00102$
                                    290 ;	libstm8s/src/stm8s_tim4.c: 328: bitstatus = SET;
      0000DA A6 01            [ 1]  291 	ld	a, #0x01
                                    292 ;	libstm8s/src/stm8s_tim4.c: 332: bitstatus = RESET;
      0000DC 21                     293 	.byte 0x21
      0000DD                        294 00102$:
      0000DD 4F               [ 1]  295 	clr	a
      0000DE                        296 00103$:
                                    297 ;	libstm8s/src/stm8s_tim4.c: 334: return ((FlagStatus)bitstatus);
      0000DE 81               [ 4]  298 	ret
                                    299 ;	libstm8s/src/stm8s_tim4.c: 344: void TIM4_ClearFlag(TIM4_FLAG_TypeDef TIM4_FLAG)
                                    300 ;	-----------------------------------------
                                    301 ;	 function TIM4_ClearFlag
                                    302 ;	-----------------------------------------
      0000DF                        303 _TIM4_ClearFlag:
                                    304 ;	libstm8s/src/stm8s_tim4.c: 350: TIM4->SR1 = (uint8_t)(~TIM4_FLAG);
      0000DF 7B 03            [ 1]  305 	ld	a, (0x03, sp)
      0000E1 43               [ 1]  306 	cpl	a
      0000E2 AE 53 44         [ 2]  307 	ldw	x, #0x5344
      0000E5 F7               [ 1]  308 	ld	(x), a
      0000E6 81               [ 4]  309 	ret
                                    310 ;	libstm8s/src/stm8s_tim4.c: 360: ITStatus TIM4_GetITStatus(TIM4_IT_TypeDef TIM4_IT)
                                    311 ;	-----------------------------------------
                                    312 ;	 function TIM4_GetITStatus
                                    313 ;	-----------------------------------------
      0000E7                        314 _TIM4_GetITStatus:
      0000E7 88               [ 1]  315 	push	a
                                    316 ;	libstm8s/src/stm8s_tim4.c: 369: itstatus = (uint8_t)(TIM4->SR1 & (uint8_t)TIM4_IT);
      0000E8 AE 53 44         [ 2]  317 	ldw	x, #0x5344
      0000EB F6               [ 1]  318 	ld	a, (x)
      0000EC 14 04            [ 1]  319 	and	a, (0x04, sp)
      0000EE 6B 01            [ 1]  320 	ld	(0x01, sp), a
                                    321 ;	libstm8s/src/stm8s_tim4.c: 371: itenable = (uint8_t)(TIM4->IER & (uint8_t)TIM4_IT);
      0000F0 AE 53 43         [ 2]  322 	ldw	x, #0x5343
      0000F3 F6               [ 1]  323 	ld	a, (x)
      0000F4 14 04            [ 1]  324 	and	a, (0x04, sp)
                                    325 ;	libstm8s/src/stm8s_tim4.c: 373: if ((itstatus != (uint8_t)RESET ) && (itenable != (uint8_t)RESET ))
      0000F6 0D 01            [ 1]  326 	tnz	(0x01, sp)
      0000F8 27 06            [ 1]  327 	jreq	00102$
      0000FA 4D               [ 1]  328 	tnz	a
      0000FB 27 03            [ 1]  329 	jreq	00102$
                                    330 ;	libstm8s/src/stm8s_tim4.c: 375: bitstatus = (ITStatus)SET;
      0000FD A6 01            [ 1]  331 	ld	a, #0x01
                                    332 ;	libstm8s/src/stm8s_tim4.c: 379: bitstatus = (ITStatus)RESET;
      0000FF 21                     333 	.byte 0x21
      000100                        334 00102$:
      000100 4F               [ 1]  335 	clr	a
      000101                        336 00103$:
                                    337 ;	libstm8s/src/stm8s_tim4.c: 381: return ((ITStatus)bitstatus);
      000101 5B 01            [ 2]  338 	addw	sp, #1
      000103 81               [ 4]  339 	ret
                                    340 ;	libstm8s/src/stm8s_tim4.c: 391: void TIM4_ClearITPendingBit(TIM4_IT_TypeDef TIM4_IT)
                                    341 ;	-----------------------------------------
                                    342 ;	 function TIM4_ClearITPendingBit
                                    343 ;	-----------------------------------------
      000104                        344 _TIM4_ClearITPendingBit:
                                    345 ;	libstm8s/src/stm8s_tim4.c: 397: TIM4->SR1 = (uint8_t)(~TIM4_IT);
      000104 7B 03            [ 1]  346 	ld	a, (0x03, sp)
      000106 43               [ 1]  347 	cpl	a
      000107 AE 53 44         [ 2]  348 	ldw	x, #0x5344
      00010A F7               [ 1]  349 	ld	(x), a
      00010B 81               [ 4]  350 	ret
                                    351 	.area CODE
                                    352 	.area INITIALIZER
                                    353 	.area CABS (ABS)
