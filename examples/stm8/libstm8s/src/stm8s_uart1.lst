                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Fri Sep 20 09:49:49 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module stm8s_uart1
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _CLK_GetClockFreq
                                     13 	.globl _UART1_DeInit
                                     14 	.globl _UART1_Init
                                     15 	.globl _UART1_Cmd
                                     16 	.globl _UART1_ITConfig
                                     17 	.globl _UART1_HalfDuplexCmd
                                     18 	.globl _UART1_IrDAConfig
                                     19 	.globl _UART1_IrDACmd
                                     20 	.globl _UART1_LINBreakDetectionConfig
                                     21 	.globl _UART1_LINCmd
                                     22 	.globl _UART1_SmartCardCmd
                                     23 	.globl _UART1_SmartCardNACKCmd
                                     24 	.globl _UART1_WakeUpConfig
                                     25 	.globl _UART1_ReceiverWakeUpCmd
                                     26 	.globl _UART1_ReceiveData8
                                     27 	.globl _UART1_ReceiveData9
                                     28 	.globl _UART1_SendData8
                                     29 	.globl _UART1_SendData9
                                     30 	.globl _UART1_SendBreak
                                     31 	.globl _UART1_SetAddress
                                     32 	.globl _UART1_SetGuardTime
                                     33 	.globl _UART1_SetPrescaler
                                     34 	.globl _UART1_GetFlagStatus
                                     35 	.globl _UART1_ClearFlag
                                     36 	.globl _UART1_GetITStatus
                                     37 	.globl _UART1_ClearITPendingBit
                                     38 ;--------------------------------------------------------
                                     39 ; ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DATA
                                     42 ;--------------------------------------------------------
                                     43 ; ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area INITIALIZED
                                     46 ;--------------------------------------------------------
                                     47 ; absolute external ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area DABS (ABS)
                                     50 ;--------------------------------------------------------
                                     51 ; global & static initialisations
                                     52 ;--------------------------------------------------------
                                     53 	.area HOME
                                     54 	.area GSINIT
                                     55 	.area GSFINAL
                                     56 	.area GSINIT
                                     57 ;--------------------------------------------------------
                                     58 ; Home
                                     59 ;--------------------------------------------------------
                                     60 	.area HOME
                                     61 	.area HOME
                                     62 ;--------------------------------------------------------
                                     63 ; code
                                     64 ;--------------------------------------------------------
                                     65 	.area CODE
                                     66 ;	libstm8s/src/stm8s_uart1.c: 53: void UART1_DeInit(void)
                                     67 ;	-----------------------------------------
                                     68 ;	 function UART1_DeInit
                                     69 ;	-----------------------------------------
      000000                         70 _UART1_DeInit:
                                     71 ;	libstm8s/src/stm8s_uart1.c: 57: (void)UART1->SR;
      000000 AE 52 30         [ 2]   72 	ldw	x, #0x5230
      000003 F6               [ 1]   73 	ld	a, (x)
                                     74 ;	libstm8s/src/stm8s_uart1.c: 58: (void)UART1->DR;
      000004 AE 52 31         [ 2]   75 	ldw	x, #0x5231
      000007 F6               [ 1]   76 	ld	a, (x)
                                     77 ;	libstm8s/src/stm8s_uart1.c: 60: UART1->BRR2 = UART1_BRR2_RESET_VALUE;  /* Set UART1_BRR2 to reset value 0x00 */
      000008 35 00 52 33      [ 1]   78 	mov	0x5233+0, #0x00
                                     79 ;	libstm8s/src/stm8s_uart1.c: 61: UART1->BRR1 = UART1_BRR1_RESET_VALUE;  /* Set UART1_BRR1 to reset value 0x00 */
      00000C 35 00 52 32      [ 1]   80 	mov	0x5232+0, #0x00
                                     81 ;	libstm8s/src/stm8s_uart1.c: 63: UART1->CR1 = UART1_CR1_RESET_VALUE;  /* Set UART1_CR1 to reset value 0x00 */
      000010 35 00 52 34      [ 1]   82 	mov	0x5234+0, #0x00
                                     83 ;	libstm8s/src/stm8s_uart1.c: 64: UART1->CR2 = UART1_CR2_RESET_VALUE;  /* Set UART1_CR2 to reset value 0x00 */
      000014 35 00 52 35      [ 1]   84 	mov	0x5235+0, #0x00
                                     85 ;	libstm8s/src/stm8s_uart1.c: 65: UART1->CR3 = UART1_CR3_RESET_VALUE;  /* Set UART1_CR3 to reset value 0x00 */
      000018 35 00 52 36      [ 1]   86 	mov	0x5236+0, #0x00
                                     87 ;	libstm8s/src/stm8s_uart1.c: 66: UART1->CR4 = UART1_CR4_RESET_VALUE;  /* Set UART1_CR4 to reset value 0x00 */
      00001C 35 00 52 37      [ 1]   88 	mov	0x5237+0, #0x00
                                     89 ;	libstm8s/src/stm8s_uart1.c: 67: UART1->CR5 = UART1_CR5_RESET_VALUE;  /* Set UART1_CR5 to reset value 0x00 */
      000020 35 00 52 38      [ 1]   90 	mov	0x5238+0, #0x00
                                     91 ;	libstm8s/src/stm8s_uart1.c: 69: UART1->GTR = UART1_GTR_RESET_VALUE;
      000024 35 00 52 39      [ 1]   92 	mov	0x5239+0, #0x00
                                     93 ;	libstm8s/src/stm8s_uart1.c: 70: UART1->PSCR = UART1_PSCR_RESET_VALUE;
      000028 35 00 52 3A      [ 1]   94 	mov	0x523a+0, #0x00
      00002C 81               [ 4]   95 	ret
                                     96 ;	libstm8s/src/stm8s_uart1.c: 90: void UART1_Init(uint32_t BaudRate, UART1_WordLength_TypeDef WordLength, 
                                     97 ;	-----------------------------------------
                                     98 ;	 function UART1_Init
                                     99 ;	-----------------------------------------
      00002D                        100 _UART1_Init:
      00002D 52 21            [ 2]  101 	sub	sp, #33
                                    102 ;	libstm8s/src/stm8s_uart1.c: 105: UART1->CR1 &= (uint8_t)(~UART1_CR1_M);  
      00002F AE 52 34         [ 2]  103 	ldw	x, #0x5234
      000032 F6               [ 1]  104 	ld	a, (x)
      000033 A4 EF            [ 1]  105 	and	a, #0xef
      000035 F7               [ 1]  106 	ld	(x), a
                                    107 ;	libstm8s/src/stm8s_uart1.c: 108: UART1->CR1 |= (uint8_t)WordLength;
      000036 AE 52 34         [ 2]  108 	ldw	x, #0x5234
      000039 F6               [ 1]  109 	ld	a, (x)
      00003A 1A 28            [ 1]  110 	or	a, (0x28, sp)
      00003C AE 52 34         [ 2]  111 	ldw	x, #0x5234
      00003F F7               [ 1]  112 	ld	(x), a
                                    113 ;	libstm8s/src/stm8s_uart1.c: 111: UART1->CR3 &= (uint8_t)(~UART1_CR3_STOP);  
      000040 AE 52 36         [ 2]  114 	ldw	x, #0x5236
      000043 F6               [ 1]  115 	ld	a, (x)
      000044 A4 CF            [ 1]  116 	and	a, #0xcf
      000046 F7               [ 1]  117 	ld	(x), a
                                    118 ;	libstm8s/src/stm8s_uart1.c: 113: UART1->CR3 |= (uint8_t)StopBits;  
      000047 AE 52 36         [ 2]  119 	ldw	x, #0x5236
      00004A F6               [ 1]  120 	ld	a, (x)
      00004B 1A 29            [ 1]  121 	or	a, (0x29, sp)
      00004D AE 52 36         [ 2]  122 	ldw	x, #0x5236
      000050 F7               [ 1]  123 	ld	(x), a
                                    124 ;	libstm8s/src/stm8s_uart1.c: 116: UART1->CR1 &= (uint8_t)(~(UART1_CR1_PCEN | UART1_CR1_PS  ));  
      000051 AE 52 34         [ 2]  125 	ldw	x, #0x5234
      000054 F6               [ 1]  126 	ld	a, (x)
      000055 A4 F9            [ 1]  127 	and	a, #0xf9
      000057 F7               [ 1]  128 	ld	(x), a
                                    129 ;	libstm8s/src/stm8s_uart1.c: 118: UART1->CR1 |= (uint8_t)Parity;  
      000058 AE 52 34         [ 2]  130 	ldw	x, #0x5234
      00005B F6               [ 1]  131 	ld	a, (x)
      00005C 1A 2A            [ 1]  132 	or	a, (0x2a, sp)
      00005E AE 52 34         [ 2]  133 	ldw	x, #0x5234
      000061 F7               [ 1]  134 	ld	(x), a
                                    135 ;	libstm8s/src/stm8s_uart1.c: 121: UART1->BRR1 &= (uint8_t)(~UART1_BRR1_DIVM);  
      000062 AE 52 32         [ 2]  136 	ldw	x, #0x5232
      000065 F6               [ 1]  137 	ld	a, (x)
      000066 35 00 52 32      [ 1]  138 	mov	0x5232+0, #0x00
                                    139 ;	libstm8s/src/stm8s_uart1.c: 123: UART1->BRR2 &= (uint8_t)(~UART1_BRR2_DIVM);  
      00006A AE 52 33         [ 2]  140 	ldw	x, #0x5233
      00006D F6               [ 1]  141 	ld	a, (x)
      00006E A4 0F            [ 1]  142 	and	a, #0x0f
      000070 F7               [ 1]  143 	ld	(x), a
                                    144 ;	libstm8s/src/stm8s_uart1.c: 125: UART1->BRR2 &= (uint8_t)(~UART1_BRR2_DIVF);  
      000071 AE 52 33         [ 2]  145 	ldw	x, #0x5233
      000074 F6               [ 1]  146 	ld	a, (x)
      000075 A4 F0            [ 1]  147 	and	a, #0xf0
      000077 F7               [ 1]  148 	ld	(x), a
                                    149 ;	libstm8s/src/stm8s_uart1.c: 128: BaudRate_Mantissa    = ((uint32_t)CLK_GetClockFreq() / (BaudRate << 4));
      000078 CDr00r00         [ 4]  150 	call	_CLK_GetClockFreq
      00007B 1F 0B            [ 2]  151 	ldw	(0x0b, sp), x
      00007D 1E 24            [ 2]  152 	ldw	x, (0x24, sp)
      00007F 1F 1D            [ 2]  153 	ldw	(0x1d, sp), x
      000081 1E 26            [ 2]  154 	ldw	x, (0x26, sp)
      000083 A6 04            [ 1]  155 	ld	a, #0x04
      000085                        156 00124$:
      000085 58               [ 2]  157 	sllw	x
      000086 09 1E            [ 1]  158 	rlc	(0x1e, sp)
      000088 09 1D            [ 1]  159 	rlc	(0x1d, sp)
      00008A 4A               [ 1]  160 	dec	a
      00008B 26 F8            [ 1]  161 	jrne	00124$
      00008D 1F 1F            [ 2]  162 	ldw	(0x1f, sp), x
      00008F 1E 1F            [ 2]  163 	ldw	x, (0x1f, sp)
      000091 89               [ 2]  164 	pushw	x
      000092 1E 1F            [ 2]  165 	ldw	x, (0x1f, sp)
      000094 89               [ 2]  166 	pushw	x
      000095 1E 0F            [ 2]  167 	ldw	x, (0x0f, sp)
      000097 89               [ 2]  168 	pushw	x
      000098 90 89            [ 2]  169 	pushw	y
      00009A CDr00r00         [ 4]  170 	call	__divulong
      00009D 5B 08            [ 2]  171 	addw	sp, #8
      00009F 1F 03            [ 2]  172 	ldw	(0x03, sp), x
      0000A1 17 01            [ 2]  173 	ldw	(0x01, sp), y
                                    174 ;	libstm8s/src/stm8s_uart1.c: 129: BaudRate_Mantissa100 = (((uint32_t)CLK_GetClockFreq() * 100) / (BaudRate << 4));
      0000A3 CDr00r00         [ 4]  175 	call	_CLK_GetClockFreq
      0000A6 9F               [ 1]  176 	ld	a, xl
      0000A7 88               [ 1]  177 	push	a
      0000A8 9E               [ 1]  178 	ld	a, xh
      0000A9 88               [ 1]  179 	push	a
      0000AA 90 89            [ 2]  180 	pushw	y
      0000AC 4B 64            [ 1]  181 	push	#0x64
      0000AE 5F               [ 1]  182 	clrw	x
      0000AF 89               [ 2]  183 	pushw	x
      0000B0 4B 00            [ 1]  184 	push	#0x00
      0000B2 CDr00r00         [ 4]  185 	call	__mullong
      0000B5 5B 08            [ 2]  186 	addw	sp, #8
      0000B7 1F 1B            [ 2]  187 	ldw	(0x1b, sp), x
      0000B9 1E 1F            [ 2]  188 	ldw	x, (0x1f, sp)
      0000BB 89               [ 2]  189 	pushw	x
      0000BC 1E 1F            [ 2]  190 	ldw	x, (0x1f, sp)
      0000BE 89               [ 2]  191 	pushw	x
      0000BF 1E 1F            [ 2]  192 	ldw	x, (0x1f, sp)
      0000C1 89               [ 2]  193 	pushw	x
      0000C2 90 89            [ 2]  194 	pushw	y
      0000C4 CDr00r00         [ 4]  195 	call	__divulong
      0000C7 5B 08            [ 2]  196 	addw	sp, #8
      0000C9 1F 07            [ 2]  197 	ldw	(0x07, sp), x
      0000CB 17 05            [ 2]  198 	ldw	(0x05, sp), y
                                    199 ;	libstm8s/src/stm8s_uart1.c: 131: UART1->BRR2 |= (uint8_t)((uint8_t)(((BaudRate_Mantissa100 - (BaudRate_Mantissa * 100)) << 4) / 100) & (uint8_t)0x0F); 
      0000CD AE 52 33         [ 2]  200 	ldw	x, #0x5233
      0000D0 F6               [ 1]  201 	ld	a, (x)
      0000D1 6B 18            [ 1]  202 	ld	(0x18, sp), a
      0000D3 1E 03            [ 2]  203 	ldw	x, (0x03, sp)
      0000D5 89               [ 2]  204 	pushw	x
      0000D6 1E 03            [ 2]  205 	ldw	x, (0x03, sp)
      0000D8 89               [ 2]  206 	pushw	x
      0000D9 4B 64            [ 1]  207 	push	#0x64
      0000DB 5F               [ 1]  208 	clrw	x
      0000DC 89               [ 2]  209 	pushw	x
      0000DD 4B 00            [ 1]  210 	push	#0x00
      0000DF CDr00r00         [ 4]  211 	call	__mullong
      0000E2 5B 08            [ 2]  212 	addw	sp, #8
      0000E4 1F 16            [ 2]  213 	ldw	(0x16, sp), x
      0000E6 17 14            [ 2]  214 	ldw	(0x14, sp), y
      0000E8 1E 07            [ 2]  215 	ldw	x, (0x07, sp)
      0000EA 72 F0 16         [ 2]  216 	subw	x, (0x16, sp)
      0000ED 1F 12            [ 2]  217 	ldw	(0x12, sp), x
      0000EF 7B 06            [ 1]  218 	ld	a, (0x06, sp)
      0000F1 12 15            [ 1]  219 	sbc	a, (0x15, sp)
      0000F3 6B 11            [ 1]  220 	ld	(0x11, sp), a
      0000F5 7B 05            [ 1]  221 	ld	a, (0x05, sp)
      0000F7 12 14            [ 1]  222 	sbc	a, (0x14, sp)
      0000F9 6B 10            [ 1]  223 	ld	(0x10, sp), a
      0000FB 16 12            [ 2]  224 	ldw	y, (0x12, sp)
      0000FD 1E 10            [ 2]  225 	ldw	x, (0x10, sp)
      0000FF A6 04            [ 1]  226 	ld	a, #0x04
      000101                        227 00126$:
      000101 90 58            [ 2]  228 	sllw	y
      000103 59               [ 2]  229 	rlcw	x
      000104 4A               [ 1]  230 	dec	a
      000105 26 FA            [ 1]  231 	jrne	00126$
      000107 4B 64            [ 1]  232 	push	#0x64
      000109 4B 00            [ 1]  233 	push	#0x00
      00010B 4B 00            [ 1]  234 	push	#0x00
      00010D 4B 00            [ 1]  235 	push	#0x00
      00010F 90 89            [ 2]  236 	pushw	y
      000111 89               [ 2]  237 	pushw	x
      000112 CDr00r00         [ 4]  238 	call	__divulong
      000115 5B 08            [ 2]  239 	addw	sp, #8
      000117 9F               [ 1]  240 	ld	a, xl
      000118 A4 0F            [ 1]  241 	and	a, #0x0f
      00011A 1A 18            [ 1]  242 	or	a, (0x18, sp)
      00011C AE 52 33         [ 2]  243 	ldw	x, #0x5233
      00011F F7               [ 1]  244 	ld	(x), a
                                    245 ;	libstm8s/src/stm8s_uart1.c: 133: UART1->BRR2 |= (uint8_t)((BaudRate_Mantissa >> 4) & (uint8_t)0xF0); 
      000120 AE 52 33         [ 2]  246 	ldw	x, #0x5233
      000123 F6               [ 1]  247 	ld	a, (x)
      000124 6B 0F            [ 1]  248 	ld	(0x0f, sp), a
      000126 1E 03            [ 2]  249 	ldw	x, (0x03, sp)
      000128 16 01            [ 2]  250 	ldw	y, (0x01, sp)
      00012A 90 54            [ 2]  251 	srlw	y
      00012C 56               [ 2]  252 	rrcw	x
      00012D 90 54            [ 2]  253 	srlw	y
      00012F 56               [ 2]  254 	rrcw	x
      000130 90 54            [ 2]  255 	srlw	y
      000132 56               [ 2]  256 	rrcw	x
      000133 90 54            [ 2]  257 	srlw	y
      000135 56               [ 2]  258 	rrcw	x
      000136 9F               [ 1]  259 	ld	a, xl
      000137 A4 F0            [ 1]  260 	and	a, #0xf0
      000139 97               [ 1]  261 	ld	xl, a
      00013A 4F               [ 1]  262 	clr	a
      00013B 90 5F            [ 1]  263 	clrw	y
      00013D 9F               [ 1]  264 	ld	a, xl
      00013E 1A 0F            [ 1]  265 	or	a, (0x0f, sp)
      000140 AE 52 33         [ 2]  266 	ldw	x, #0x5233
      000143 F7               [ 1]  267 	ld	(x), a
                                    268 ;	libstm8s/src/stm8s_uart1.c: 135: UART1->BRR1 |= (uint8_t)BaudRate_Mantissa;           
      000144 AE 52 32         [ 2]  269 	ldw	x, #0x5232
      000147 F6               [ 1]  270 	ld	a, (x)
      000148 6B 0E            [ 1]  271 	ld	(0x0e, sp), a
      00014A 7B 04            [ 1]  272 	ld	a, (0x04, sp)
      00014C 1A 0E            [ 1]  273 	or	a, (0x0e, sp)
      00014E AE 52 32         [ 2]  274 	ldw	x, #0x5232
      000151 F7               [ 1]  275 	ld	(x), a
                                    276 ;	libstm8s/src/stm8s_uart1.c: 138: UART1->CR2 &= (uint8_t)~(UART1_CR2_TEN | UART1_CR2_REN); 
      000152 AE 52 35         [ 2]  277 	ldw	x, #0x5235
      000155 F6               [ 1]  278 	ld	a, (x)
      000156 A4 F3            [ 1]  279 	and	a, #0xf3
      000158 F7               [ 1]  280 	ld	(x), a
                                    281 ;	libstm8s/src/stm8s_uart1.c: 140: UART1->CR3 &= (uint8_t)~(UART1_CR3_CPOL | UART1_CR3_CPHA | UART1_CR3_LBCL); 
      000159 AE 52 36         [ 2]  282 	ldw	x, #0x5236
      00015C F6               [ 1]  283 	ld	a, (x)
      00015D A4 F8            [ 1]  284 	and	a, #0xf8
      00015F F7               [ 1]  285 	ld	(x), a
                                    286 ;	libstm8s/src/stm8s_uart1.c: 142: UART1->CR3 |= (uint8_t)((uint8_t)SyncMode & (uint8_t)(UART1_CR3_CPOL | 
      000160 AE 52 36         [ 2]  287 	ldw	x, #0x5236
      000163 F6               [ 1]  288 	ld	a, (x)
      000164 6B 0D            [ 1]  289 	ld	(0x0d, sp), a
      000166 7B 2B            [ 1]  290 	ld	a, (0x2b, sp)
      000168 A4 07            [ 1]  291 	and	a, #0x07
      00016A 1A 0D            [ 1]  292 	or	a, (0x0d, sp)
      00016C AE 52 36         [ 2]  293 	ldw	x, #0x5236
      00016F F7               [ 1]  294 	ld	(x), a
                                    295 ;	libstm8s/src/stm8s_uart1.c: 145: if ((uint8_t)(Mode & UART1_MODE_TX_ENABLE))
      000170 7B 2C            [ 1]  296 	ld	a, (0x2c, sp)
      000172 A5 04            [ 1]  297 	bcp	a, #0x04
      000174 27 09            [ 1]  298 	jreq	00102$
                                    299 ;	libstm8s/src/stm8s_uart1.c: 148: UART1->CR2 |= (uint8_t)UART1_CR2_TEN;  
      000176 AE 52 35         [ 2]  300 	ldw	x, #0x5235
      000179 F6               [ 1]  301 	ld	a, (x)
      00017A AA 08            [ 1]  302 	or	a, #0x08
      00017C F7               [ 1]  303 	ld	(x), a
      00017D 20 07            [ 2]  304 	jra	00103$
      00017F                        305 00102$:
                                    306 ;	libstm8s/src/stm8s_uart1.c: 153: UART1->CR2 &= (uint8_t)(~UART1_CR2_TEN);  
      00017F AE 52 35         [ 2]  307 	ldw	x, #0x5235
      000182 F6               [ 1]  308 	ld	a, (x)
      000183 A4 F7            [ 1]  309 	and	a, #0xf7
      000185 F7               [ 1]  310 	ld	(x), a
      000186                        311 00103$:
                                    312 ;	libstm8s/src/stm8s_uart1.c: 155: if ((uint8_t)(Mode & UART1_MODE_RX_ENABLE))
      000186 7B 2C            [ 1]  313 	ld	a, (0x2c, sp)
      000188 A5 08            [ 1]  314 	bcp	a, #0x08
      00018A 27 09            [ 1]  315 	jreq	00105$
                                    316 ;	libstm8s/src/stm8s_uart1.c: 158: UART1->CR2 |= (uint8_t)UART1_CR2_REN;  
      00018C AE 52 35         [ 2]  317 	ldw	x, #0x5235
      00018F F6               [ 1]  318 	ld	a, (x)
      000190 AA 04            [ 1]  319 	or	a, #0x04
      000192 F7               [ 1]  320 	ld	(x), a
      000193 20 07            [ 2]  321 	jra	00106$
      000195                        322 00105$:
                                    323 ;	libstm8s/src/stm8s_uart1.c: 163: UART1->CR2 &= (uint8_t)(~UART1_CR2_REN);  
      000195 AE 52 35         [ 2]  324 	ldw	x, #0x5235
      000198 F6               [ 1]  325 	ld	a, (x)
      000199 A4 FB            [ 1]  326 	and	a, #0xfb
      00019B F7               [ 1]  327 	ld	(x), a
      00019C                        328 00106$:
                                    329 ;	libstm8s/src/stm8s_uart1.c: 167: if ((uint8_t)(SyncMode & UART1_SYNCMODE_CLOCK_DISABLE))
      00019C 0D 2B            [ 1]  330 	tnz	(0x2b, sp)
      00019E 2A 09            [ 1]  331 	jrpl	00108$
                                    332 ;	libstm8s/src/stm8s_uart1.c: 170: UART1->CR3 &= (uint8_t)(~UART1_CR3_CKEN); 
      0001A0 AE 52 36         [ 2]  333 	ldw	x, #0x5236
      0001A3 F6               [ 1]  334 	ld	a, (x)
      0001A4 A4 F7            [ 1]  335 	and	a, #0xf7
      0001A6 F7               [ 1]  336 	ld	(x), a
      0001A7 20 10            [ 2]  337 	jra	00110$
      0001A9                        338 00108$:
                                    339 ;	libstm8s/src/stm8s_uart1.c: 174: UART1->CR3 |= (uint8_t)((uint8_t)SyncMode & UART1_CR3_CKEN);
      0001A9 AE 52 36         [ 2]  340 	ldw	x, #0x5236
      0001AC F6               [ 1]  341 	ld	a, (x)
      0001AD 6B 21            [ 1]  342 	ld	(0x21, sp), a
      0001AF 7B 2B            [ 1]  343 	ld	a, (0x2b, sp)
      0001B1 A4 08            [ 1]  344 	and	a, #0x08
      0001B3 1A 21            [ 1]  345 	or	a, (0x21, sp)
      0001B5 AE 52 36         [ 2]  346 	ldw	x, #0x5236
      0001B8 F7               [ 1]  347 	ld	(x), a
      0001B9                        348 00110$:
      0001B9 5B 21            [ 2]  349 	addw	sp, #33
      0001BB 81               [ 4]  350 	ret
                                    351 ;	libstm8s/src/stm8s_uart1.c: 184: void UART1_Cmd(FunctionalState NewState)
                                    352 ;	-----------------------------------------
                                    353 ;	 function UART1_Cmd
                                    354 ;	-----------------------------------------
      0001BC                        355 _UART1_Cmd:
                                    356 ;	libstm8s/src/stm8s_uart1.c: 186: if (NewState != DISABLE)
      0001BC 0D 03            [ 1]  357 	tnz	(0x03, sp)
      0001BE 27 09            [ 1]  358 	jreq	00102$
                                    359 ;	libstm8s/src/stm8s_uart1.c: 189: UART1->CR1 &= (uint8_t)(~UART1_CR1_UARTD); 
      0001C0 AE 52 34         [ 2]  360 	ldw	x, #0x5234
      0001C3 F6               [ 1]  361 	ld	a, (x)
      0001C4 A4 DF            [ 1]  362 	and	a, #0xdf
      0001C6 F7               [ 1]  363 	ld	(x), a
      0001C7 20 07            [ 2]  364 	jra	00104$
      0001C9                        365 00102$:
                                    366 ;	libstm8s/src/stm8s_uart1.c: 194: UART1->CR1 |= UART1_CR1_UARTD;  
      0001C9 AE 52 34         [ 2]  367 	ldw	x, #0x5234
      0001CC F6               [ 1]  368 	ld	a, (x)
      0001CD AA 20            [ 1]  369 	or	a, #0x20
      0001CF F7               [ 1]  370 	ld	(x), a
      0001D0                        371 00104$:
      0001D0 81               [ 4]  372 	ret
                                    373 ;	libstm8s/src/stm8s_uart1.c: 211: void UART1_ITConfig(UART1_IT_TypeDef UART1_IT, FunctionalState NewState)
                                    374 ;	-----------------------------------------
                                    375 ;	 function UART1_ITConfig
                                    376 ;	-----------------------------------------
      0001D1                        377 _UART1_ITConfig:
      0001D1 52 03            [ 2]  378 	sub	sp, #3
                                    379 ;	libstm8s/src/stm8s_uart1.c: 220: uartreg = (uint8_t)((uint16_t)UART1_IT >> 0x08);
      0001D3 7B 06            [ 1]  380 	ld	a, (0x06, sp)
      0001D5 95               [ 1]  381 	ld	xh, a
      0001D6 4F               [ 1]  382 	clr	a
                                    383 ;	libstm8s/src/stm8s_uart1.c: 222: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART1_IT & (uint8_t)0x0F));
      0001D7 7B 07            [ 1]  384 	ld	a, (0x07, sp)
      0001D9 A4 0F            [ 1]  385 	and	a, #0x0f
      0001DB 97               [ 1]  386 	ld	xl, a
      0001DC A6 01            [ 1]  387 	ld	a, #0x01
      0001DE 88               [ 1]  388 	push	a
      0001DF 9F               [ 1]  389 	ld	a, xl
      0001E0 4D               [ 1]  390 	tnz	a
      0001E1 27 05            [ 1]  391 	jreq	00139$
      0001E3                        392 00138$:
      0001E3 08 01            [ 1]  393 	sll	(1, sp)
      0001E5 4A               [ 1]  394 	dec	a
      0001E6 26 FB            [ 1]  395 	jrne	00138$
      0001E8                        396 00139$:
      0001E8 84               [ 1]  397 	pop	a
      0001E9 6B 01            [ 1]  398 	ld	(0x01, sp), a
                                    399 ;	libstm8s/src/stm8s_uart1.c: 227: if (uartreg == 0x01)
      0001EB 9E               [ 1]  400 	ld	a, xh
      0001EC A1 01            [ 1]  401 	cp	a, #0x01
      0001EE 26 06            [ 1]  402 	jrne	00141$
      0001F0 A6 01            [ 1]  403 	ld	a, #0x01
      0001F2 6B 03            [ 1]  404 	ld	(0x03, sp), a
      0001F4 20 02            [ 2]  405 	jra	00142$
      0001F6                        406 00141$:
      0001F6 0F 03            [ 1]  407 	clr	(0x03, sp)
      0001F8                        408 00142$:
                                    409 ;	libstm8s/src/stm8s_uart1.c: 231: else if (uartreg == 0x02)
      0001F8 9E               [ 1]  410 	ld	a, xh
      0001F9 A1 02            [ 1]  411 	cp	a, #0x02
      0001FB 26 03            [ 1]  412 	jrne	00144$
      0001FD A6 01            [ 1]  413 	ld	a, #0x01
      0001FF 21                     414 	.byte 0x21
      000200                        415 00144$:
      000200 4F               [ 1]  416 	clr	a
      000201                        417 00145$:
                                    418 ;	libstm8s/src/stm8s_uart1.c: 224: if (NewState != DISABLE)
      000201 0D 08            [ 1]  419 	tnz	(0x08, sp)
      000203 27 2B            [ 1]  420 	jreq	00114$
                                    421 ;	libstm8s/src/stm8s_uart1.c: 227: if (uartreg == 0x01)
      000205 0D 03            [ 1]  422 	tnz	(0x03, sp)
      000207 27 0C            [ 1]  423 	jreq	00105$
                                    424 ;	libstm8s/src/stm8s_uart1.c: 229: UART1->CR1 |= itpos;
      000209 AE 52 34         [ 2]  425 	ldw	x, #0x5234
      00020C F6               [ 1]  426 	ld	a, (x)
      00020D 1A 01            [ 1]  427 	or	a, (0x01, sp)
      00020F AE 52 34         [ 2]  428 	ldw	x, #0x5234
      000212 F7               [ 1]  429 	ld	(x), a
      000213 20 4B            [ 2]  430 	jra	00116$
      000215                        431 00105$:
                                    432 ;	libstm8s/src/stm8s_uart1.c: 231: else if (uartreg == 0x02)
      000215 4D               [ 1]  433 	tnz	a
      000216 27 0C            [ 1]  434 	jreq	00102$
                                    435 ;	libstm8s/src/stm8s_uart1.c: 233: UART1->CR2 |= itpos;
      000218 AE 52 35         [ 2]  436 	ldw	x, #0x5235
      00021B F6               [ 1]  437 	ld	a, (x)
      00021C 1A 01            [ 1]  438 	or	a, (0x01, sp)
      00021E AE 52 35         [ 2]  439 	ldw	x, #0x5235
      000221 F7               [ 1]  440 	ld	(x), a
      000222 20 3C            [ 2]  441 	jra	00116$
      000224                        442 00102$:
                                    443 ;	libstm8s/src/stm8s_uart1.c: 237: UART1->CR4 |= itpos;
      000224 AE 52 37         [ 2]  444 	ldw	x, #0x5237
      000227 F6               [ 1]  445 	ld	a, (x)
      000228 1A 01            [ 1]  446 	or	a, (0x01, sp)
      00022A AE 52 37         [ 2]  447 	ldw	x, #0x5237
      00022D F7               [ 1]  448 	ld	(x), a
      00022E 20 30            [ 2]  449 	jra	00116$
      000230                        450 00114$:
                                    451 ;	libstm8s/src/stm8s_uart1.c: 245: UART1->CR1 &= (uint8_t)(~itpos);
      000230 88               [ 1]  452 	push	a
      000231 7B 02            [ 1]  453 	ld	a, (0x02, sp)
      000233 43               [ 1]  454 	cpl	a
      000234 6B 03            [ 1]  455 	ld	(0x03, sp), a
      000236 84               [ 1]  456 	pop	a
                                    457 ;	libstm8s/src/stm8s_uart1.c: 243: if (uartreg == 0x01)
      000237 0D 03            [ 1]  458 	tnz	(0x03, sp)
      000239 27 0C            [ 1]  459 	jreq	00111$
                                    460 ;	libstm8s/src/stm8s_uart1.c: 245: UART1->CR1 &= (uint8_t)(~itpos);
      00023B AE 52 34         [ 2]  461 	ldw	x, #0x5234
      00023E F6               [ 1]  462 	ld	a, (x)
      00023F 14 02            [ 1]  463 	and	a, (0x02, sp)
      000241 AE 52 34         [ 2]  464 	ldw	x, #0x5234
      000244 F7               [ 1]  465 	ld	(x), a
      000245 20 19            [ 2]  466 	jra	00116$
      000247                        467 00111$:
                                    468 ;	libstm8s/src/stm8s_uart1.c: 247: else if (uartreg == 0x02)
      000247 4D               [ 1]  469 	tnz	a
      000248 27 0C            [ 1]  470 	jreq	00108$
                                    471 ;	libstm8s/src/stm8s_uart1.c: 249: UART1->CR2 &= (uint8_t)(~itpos);
      00024A AE 52 35         [ 2]  472 	ldw	x, #0x5235
      00024D F6               [ 1]  473 	ld	a, (x)
      00024E 14 02            [ 1]  474 	and	a, (0x02, sp)
      000250 AE 52 35         [ 2]  475 	ldw	x, #0x5235
      000253 F7               [ 1]  476 	ld	(x), a
      000254 20 0A            [ 2]  477 	jra	00116$
      000256                        478 00108$:
                                    479 ;	libstm8s/src/stm8s_uart1.c: 253: UART1->CR4 &= (uint8_t)(~itpos);
      000256 AE 52 37         [ 2]  480 	ldw	x, #0x5237
      000259 F6               [ 1]  481 	ld	a, (x)
      00025A 14 02            [ 1]  482 	and	a, (0x02, sp)
      00025C AE 52 37         [ 2]  483 	ldw	x, #0x5237
      00025F F7               [ 1]  484 	ld	(x), a
      000260                        485 00116$:
      000260 5B 03            [ 2]  486 	addw	sp, #3
      000262 81               [ 4]  487 	ret
                                    488 ;	libstm8s/src/stm8s_uart1.c: 265: void UART1_HalfDuplexCmd(FunctionalState NewState)
                                    489 ;	-----------------------------------------
                                    490 ;	 function UART1_HalfDuplexCmd
                                    491 ;	-----------------------------------------
      000263                        492 _UART1_HalfDuplexCmd:
                                    493 ;	libstm8s/src/stm8s_uart1.c: 269: if (NewState != DISABLE)
      000263 0D 03            [ 1]  494 	tnz	(0x03, sp)
      000265 27 09            [ 1]  495 	jreq	00102$
                                    496 ;	libstm8s/src/stm8s_uart1.c: 271: UART1->CR5 |= UART1_CR5_HDSEL;  /**< UART1 Half Duplex Enable  */
      000267 AE 52 38         [ 2]  497 	ldw	x, #0x5238
      00026A F6               [ 1]  498 	ld	a, (x)
      00026B AA 08            [ 1]  499 	or	a, #0x08
      00026D F7               [ 1]  500 	ld	(x), a
      00026E 20 07            [ 2]  501 	jra	00104$
      000270                        502 00102$:
                                    503 ;	libstm8s/src/stm8s_uart1.c: 275: UART1->CR5 &= (uint8_t)~UART1_CR5_HDSEL; /**< UART1 Half Duplex Disable */
      000270 AE 52 38         [ 2]  504 	ldw	x, #0x5238
      000273 F6               [ 1]  505 	ld	a, (x)
      000274 A4 F7            [ 1]  506 	and	a, #0xf7
      000276 F7               [ 1]  507 	ld	(x), a
      000277                        508 00104$:
      000277 81               [ 4]  509 	ret
                                    510 ;	libstm8s/src/stm8s_uart1.c: 285: void UART1_IrDAConfig(UART1_IrDAMode_TypeDef UART1_IrDAMode)
                                    511 ;	-----------------------------------------
                                    512 ;	 function UART1_IrDAConfig
                                    513 ;	-----------------------------------------
      000278                        514 _UART1_IrDAConfig:
                                    515 ;	libstm8s/src/stm8s_uart1.c: 289: if (UART1_IrDAMode != UART1_IRDAMODE_NORMAL)
      000278 0D 03            [ 1]  516 	tnz	(0x03, sp)
      00027A 27 09            [ 1]  517 	jreq	00102$
                                    518 ;	libstm8s/src/stm8s_uart1.c: 291: UART1->CR5 |= UART1_CR5_IRLP;
      00027C AE 52 38         [ 2]  519 	ldw	x, #0x5238
      00027F F6               [ 1]  520 	ld	a, (x)
      000280 AA 04            [ 1]  521 	or	a, #0x04
      000282 F7               [ 1]  522 	ld	(x), a
      000283 20 07            [ 2]  523 	jra	00104$
      000285                        524 00102$:
                                    525 ;	libstm8s/src/stm8s_uart1.c: 295: UART1->CR5 &= ((uint8_t)~UART1_CR5_IRLP);
      000285 AE 52 38         [ 2]  526 	ldw	x, #0x5238
      000288 F6               [ 1]  527 	ld	a, (x)
      000289 A4 FB            [ 1]  528 	and	a, #0xfb
      00028B F7               [ 1]  529 	ld	(x), a
      00028C                        530 00104$:
      00028C 81               [ 4]  531 	ret
                                    532 ;	libstm8s/src/stm8s_uart1.c: 305: void UART1_IrDACmd(FunctionalState NewState)
                                    533 ;	-----------------------------------------
                                    534 ;	 function UART1_IrDACmd
                                    535 ;	-----------------------------------------
      00028D                        536 _UART1_IrDACmd:
                                    537 ;	libstm8s/src/stm8s_uart1.c: 310: if (NewState != DISABLE)
      00028D 0D 03            [ 1]  538 	tnz	(0x03, sp)
      00028F 27 09            [ 1]  539 	jreq	00102$
                                    540 ;	libstm8s/src/stm8s_uart1.c: 313: UART1->CR5 |= UART1_CR5_IREN;
      000291 AE 52 38         [ 2]  541 	ldw	x, #0x5238
      000294 F6               [ 1]  542 	ld	a, (x)
      000295 AA 02            [ 1]  543 	or	a, #0x02
      000297 F7               [ 1]  544 	ld	(x), a
      000298 20 07            [ 2]  545 	jra	00104$
      00029A                        546 00102$:
                                    547 ;	libstm8s/src/stm8s_uart1.c: 318: UART1->CR5 &= ((uint8_t)~UART1_CR5_IREN);
      00029A AE 52 38         [ 2]  548 	ldw	x, #0x5238
      00029D F6               [ 1]  549 	ld	a, (x)
      00029E A4 FD            [ 1]  550 	and	a, #0xfd
      0002A0 F7               [ 1]  551 	ld	(x), a
      0002A1                        552 00104$:
      0002A1 81               [ 4]  553 	ret
                                    554 ;	libstm8s/src/stm8s_uart1.c: 329: void UART1_LINBreakDetectionConfig(UART1_LINBreakDetectionLength_TypeDef UART1_LINBreakDetectionLength)
                                    555 ;	-----------------------------------------
                                    556 ;	 function UART1_LINBreakDetectionConfig
                                    557 ;	-----------------------------------------
      0002A2                        558 _UART1_LINBreakDetectionConfig:
                                    559 ;	libstm8s/src/stm8s_uart1.c: 333: if (UART1_LINBreakDetectionLength != UART1_LINBREAKDETECTIONLENGTH_10BITS)
      0002A2 0D 03            [ 1]  560 	tnz	(0x03, sp)
      0002A4 27 09            [ 1]  561 	jreq	00102$
                                    562 ;	libstm8s/src/stm8s_uart1.c: 335: UART1->CR4 |= UART1_CR4_LBDL;
      0002A6 AE 52 37         [ 2]  563 	ldw	x, #0x5237
      0002A9 F6               [ 1]  564 	ld	a, (x)
      0002AA AA 20            [ 1]  565 	or	a, #0x20
      0002AC F7               [ 1]  566 	ld	(x), a
      0002AD 20 07            [ 2]  567 	jra	00104$
      0002AF                        568 00102$:
                                    569 ;	libstm8s/src/stm8s_uart1.c: 339: UART1->CR4 &= ((uint8_t)~UART1_CR4_LBDL);
      0002AF AE 52 37         [ 2]  570 	ldw	x, #0x5237
      0002B2 F6               [ 1]  571 	ld	a, (x)
      0002B3 A4 DF            [ 1]  572 	and	a, #0xdf
      0002B5 F7               [ 1]  573 	ld	(x), a
      0002B6                        574 00104$:
      0002B6 81               [ 4]  575 	ret
                                    576 ;	libstm8s/src/stm8s_uart1.c: 349: void UART1_LINCmd(FunctionalState NewState)
                                    577 ;	-----------------------------------------
                                    578 ;	 function UART1_LINCmd
                                    579 ;	-----------------------------------------
      0002B7                        580 _UART1_LINCmd:
                                    581 ;	libstm8s/src/stm8s_uart1.c: 353: if (NewState != DISABLE)
      0002B7 0D 03            [ 1]  582 	tnz	(0x03, sp)
      0002B9 27 09            [ 1]  583 	jreq	00102$
                                    584 ;	libstm8s/src/stm8s_uart1.c: 356: UART1->CR3 |= UART1_CR3_LINEN;
      0002BB AE 52 36         [ 2]  585 	ldw	x, #0x5236
      0002BE F6               [ 1]  586 	ld	a, (x)
      0002BF AA 40            [ 1]  587 	or	a, #0x40
      0002C1 F7               [ 1]  588 	ld	(x), a
      0002C2 20 07            [ 2]  589 	jra	00104$
      0002C4                        590 00102$:
                                    591 ;	libstm8s/src/stm8s_uart1.c: 361: UART1->CR3 &= ((uint8_t)~UART1_CR3_LINEN);
      0002C4 AE 52 36         [ 2]  592 	ldw	x, #0x5236
      0002C7 F6               [ 1]  593 	ld	a, (x)
      0002C8 A4 BF            [ 1]  594 	and	a, #0xbf
      0002CA F7               [ 1]  595 	ld	(x), a
      0002CB                        596 00104$:
      0002CB 81               [ 4]  597 	ret
                                    598 ;	libstm8s/src/stm8s_uart1.c: 371: void UART1_SmartCardCmd(FunctionalState NewState)
                                    599 ;	-----------------------------------------
                                    600 ;	 function UART1_SmartCardCmd
                                    601 ;	-----------------------------------------
      0002CC                        602 _UART1_SmartCardCmd:
                                    603 ;	libstm8s/src/stm8s_uart1.c: 375: if (NewState != DISABLE)
      0002CC 0D 03            [ 1]  604 	tnz	(0x03, sp)
      0002CE 27 09            [ 1]  605 	jreq	00102$
                                    606 ;	libstm8s/src/stm8s_uart1.c: 378: UART1->CR5 |= UART1_CR5_SCEN;
      0002D0 AE 52 38         [ 2]  607 	ldw	x, #0x5238
      0002D3 F6               [ 1]  608 	ld	a, (x)
      0002D4 AA 20            [ 1]  609 	or	a, #0x20
      0002D6 F7               [ 1]  610 	ld	(x), a
      0002D7 20 07            [ 2]  611 	jra	00104$
      0002D9                        612 00102$:
                                    613 ;	libstm8s/src/stm8s_uart1.c: 383: UART1->CR5 &= ((uint8_t)(~UART1_CR5_SCEN));
      0002D9 AE 52 38         [ 2]  614 	ldw	x, #0x5238
      0002DC F6               [ 1]  615 	ld	a, (x)
      0002DD A4 DF            [ 1]  616 	and	a, #0xdf
      0002DF F7               [ 1]  617 	ld	(x), a
      0002E0                        618 00104$:
      0002E0 81               [ 4]  619 	ret
                                    620 ;	libstm8s/src/stm8s_uart1.c: 394: void UART1_SmartCardNACKCmd(FunctionalState NewState)
                                    621 ;	-----------------------------------------
                                    622 ;	 function UART1_SmartCardNACKCmd
                                    623 ;	-----------------------------------------
      0002E1                        624 _UART1_SmartCardNACKCmd:
                                    625 ;	libstm8s/src/stm8s_uart1.c: 398: if (NewState != DISABLE)
      0002E1 0D 03            [ 1]  626 	tnz	(0x03, sp)
      0002E3 27 09            [ 1]  627 	jreq	00102$
                                    628 ;	libstm8s/src/stm8s_uart1.c: 401: UART1->CR5 |= UART1_CR5_NACK;
      0002E5 AE 52 38         [ 2]  629 	ldw	x, #0x5238
      0002E8 F6               [ 1]  630 	ld	a, (x)
      0002E9 AA 10            [ 1]  631 	or	a, #0x10
      0002EB F7               [ 1]  632 	ld	(x), a
      0002EC 20 07            [ 2]  633 	jra	00104$
      0002EE                        634 00102$:
                                    635 ;	libstm8s/src/stm8s_uart1.c: 406: UART1->CR5 &= ((uint8_t)~(UART1_CR5_NACK));
      0002EE AE 52 38         [ 2]  636 	ldw	x, #0x5238
      0002F1 F6               [ 1]  637 	ld	a, (x)
      0002F2 A4 EF            [ 1]  638 	and	a, #0xef
      0002F4 F7               [ 1]  639 	ld	(x), a
      0002F5                        640 00104$:
      0002F5 81               [ 4]  641 	ret
                                    642 ;	libstm8s/src/stm8s_uart1.c: 416: void UART1_WakeUpConfig(UART1_WakeUp_TypeDef UART1_WakeUp)
                                    643 ;	-----------------------------------------
                                    644 ;	 function UART1_WakeUpConfig
                                    645 ;	-----------------------------------------
      0002F6                        646 _UART1_WakeUpConfig:
                                    647 ;	libstm8s/src/stm8s_uart1.c: 420: UART1->CR1 &= ((uint8_t)~UART1_CR1_WAKE);
      0002F6 AE 52 34         [ 2]  648 	ldw	x, #0x5234
      0002F9 F6               [ 1]  649 	ld	a, (x)
      0002FA A4 F7            [ 1]  650 	and	a, #0xf7
      0002FC F7               [ 1]  651 	ld	(x), a
                                    652 ;	libstm8s/src/stm8s_uart1.c: 421: UART1->CR1 |= (uint8_t)UART1_WakeUp;
      0002FD AE 52 34         [ 2]  653 	ldw	x, #0x5234
      000300 F6               [ 1]  654 	ld	a, (x)
      000301 1A 03            [ 1]  655 	or	a, (0x03, sp)
      000303 AE 52 34         [ 2]  656 	ldw	x, #0x5234
      000306 F7               [ 1]  657 	ld	(x), a
      000307 81               [ 4]  658 	ret
                                    659 ;	libstm8s/src/stm8s_uart1.c: 430: void UART1_ReceiverWakeUpCmd(FunctionalState NewState)
                                    660 ;	-----------------------------------------
                                    661 ;	 function UART1_ReceiverWakeUpCmd
                                    662 ;	-----------------------------------------
      000308                        663 _UART1_ReceiverWakeUpCmd:
                                    664 ;	libstm8s/src/stm8s_uart1.c: 434: if (NewState != DISABLE)
      000308 0D 03            [ 1]  665 	tnz	(0x03, sp)
      00030A 27 09            [ 1]  666 	jreq	00102$
                                    667 ;	libstm8s/src/stm8s_uart1.c: 437: UART1->CR2 |= UART1_CR2_RWU;
      00030C AE 52 35         [ 2]  668 	ldw	x, #0x5235
      00030F F6               [ 1]  669 	ld	a, (x)
      000310 AA 02            [ 1]  670 	or	a, #0x02
      000312 F7               [ 1]  671 	ld	(x), a
      000313 20 07            [ 2]  672 	jra	00104$
      000315                        673 00102$:
                                    674 ;	libstm8s/src/stm8s_uart1.c: 442: UART1->CR2 &= ((uint8_t)~UART1_CR2_RWU);
      000315 AE 52 35         [ 2]  675 	ldw	x, #0x5235
      000318 F6               [ 1]  676 	ld	a, (x)
      000319 A4 FD            [ 1]  677 	and	a, #0xfd
      00031B F7               [ 1]  678 	ld	(x), a
      00031C                        679 00104$:
      00031C 81               [ 4]  680 	ret
                                    681 ;	libstm8s/src/stm8s_uart1.c: 451: uint8_t UART1_ReceiveData8(void)
                                    682 ;	-----------------------------------------
                                    683 ;	 function UART1_ReceiveData8
                                    684 ;	-----------------------------------------
      00031D                        685 _UART1_ReceiveData8:
                                    686 ;	libstm8s/src/stm8s_uart1.c: 453: return ((uint8_t)UART1->DR);
      00031D AE 52 31         [ 2]  687 	ldw	x, #0x5231
      000320 F6               [ 1]  688 	ld	a, (x)
      000321 81               [ 4]  689 	ret
                                    690 ;	libstm8s/src/stm8s_uart1.c: 461: uint16_t UART1_ReceiveData9(void)
                                    691 ;	-----------------------------------------
                                    692 ;	 function UART1_ReceiveData9
                                    693 ;	-----------------------------------------
      000322                        694 _UART1_ReceiveData9:
      000322 52 04            [ 2]  695 	sub	sp, #4
                                    696 ;	libstm8s/src/stm8s_uart1.c: 465: temp = (uint16_t)(((uint16_t)( (uint16_t)UART1->CR1 & (uint16_t)UART1_CR1_R8)) << 1);
      000324 AE 52 34         [ 2]  697 	ldw	x, #0x5234
      000327 F6               [ 1]  698 	ld	a, (x)
      000328 0F 03            [ 1]  699 	clr	(0x03, sp)
      00032A A4 80            [ 1]  700 	and	a, #0x80
      00032C 97               [ 1]  701 	ld	xl, a
      00032D 4F               [ 1]  702 	clr	a
      00032E 95               [ 1]  703 	ld	xh, a
      00032F 58               [ 2]  704 	sllw	x
      000330 1F 01            [ 2]  705 	ldw	(0x01, sp), x
                                    706 ;	libstm8s/src/stm8s_uart1.c: 466: return (uint16_t)( (((uint16_t) UART1->DR) | temp ) & ((uint16_t)0x01FF));
      000332 AE 52 31         [ 2]  707 	ldw	x, #0x5231
      000335 F6               [ 1]  708 	ld	a, (x)
      000336 5F               [ 1]  709 	clrw	x
      000337 97               [ 1]  710 	ld	xl, a
      000338 1A 02            [ 1]  711 	or	a, (0x02, sp)
      00033A 02               [ 1]  712 	rlwa	x
      00033B 1A 01            [ 1]  713 	or	a, (0x01, sp)
      00033D A4 01            [ 1]  714 	and	a, #0x01
      00033F 95               [ 1]  715 	ld	xh, a
      000340 5B 04            [ 2]  716 	addw	sp, #4
      000342 81               [ 4]  717 	ret
                                    718 ;	libstm8s/src/stm8s_uart1.c: 474: void UART1_SendData8(uint8_t Data)
                                    719 ;	-----------------------------------------
                                    720 ;	 function UART1_SendData8
                                    721 ;	-----------------------------------------
      000343                        722 _UART1_SendData8:
                                    723 ;	libstm8s/src/stm8s_uart1.c: 477: UART1->DR = Data;
      000343 AE 52 31         [ 2]  724 	ldw	x, #0x5231
      000346 7B 03            [ 1]  725 	ld	a, (0x03, sp)
      000348 F7               [ 1]  726 	ld	(x), a
      000349 81               [ 4]  727 	ret
                                    728 ;	libstm8s/src/stm8s_uart1.c: 486: void UART1_SendData9(uint16_t Data)
                                    729 ;	-----------------------------------------
                                    730 ;	 function UART1_SendData9
                                    731 ;	-----------------------------------------
      00034A                        732 _UART1_SendData9:
      00034A 88               [ 1]  733 	push	a
                                    734 ;	libstm8s/src/stm8s_uart1.c: 489: UART1->CR1 &= ((uint8_t)~UART1_CR1_T8);
      00034B AE 52 34         [ 2]  735 	ldw	x, #0x5234
      00034E F6               [ 1]  736 	ld	a, (x)
      00034F A4 BF            [ 1]  737 	and	a, #0xbf
      000351 F7               [ 1]  738 	ld	(x), a
                                    739 ;	libstm8s/src/stm8s_uart1.c: 491: UART1->CR1 |= (uint8_t)(((uint8_t)(Data >> 2)) & UART1_CR1_T8);
      000352 AE 52 34         [ 2]  740 	ldw	x, #0x5234
      000355 F6               [ 1]  741 	ld	a, (x)
      000356 6B 01            [ 1]  742 	ld	(0x01, sp), a
      000358 1E 04            [ 2]  743 	ldw	x, (0x04, sp)
      00035A 54               [ 2]  744 	srlw	x
      00035B 54               [ 2]  745 	srlw	x
      00035C 9F               [ 1]  746 	ld	a, xl
      00035D A4 40            [ 1]  747 	and	a, #0x40
      00035F 1A 01            [ 1]  748 	or	a, (0x01, sp)
      000361 AE 52 34         [ 2]  749 	ldw	x, #0x5234
      000364 F7               [ 1]  750 	ld	(x), a
                                    751 ;	libstm8s/src/stm8s_uart1.c: 493: UART1->DR   = (uint8_t)(Data);
      000365 7B 05            [ 1]  752 	ld	a, (0x05, sp)
      000367 AE 52 31         [ 2]  753 	ldw	x, #0x5231
      00036A F7               [ 1]  754 	ld	(x), a
      00036B 84               [ 1]  755 	pop	a
      00036C 81               [ 4]  756 	ret
                                    757 ;	libstm8s/src/stm8s_uart1.c: 501: void UART1_SendBreak(void)
                                    758 ;	-----------------------------------------
                                    759 ;	 function UART1_SendBreak
                                    760 ;	-----------------------------------------
      00036D                        761 _UART1_SendBreak:
                                    762 ;	libstm8s/src/stm8s_uart1.c: 503: UART1->CR2 |= UART1_CR2_SBK;
      00036D 72 10 52 35      [ 1]  763 	bset	0x5235, #0
      000371 81               [ 4]  764 	ret
                                    765 ;	libstm8s/src/stm8s_uart1.c: 511: void UART1_SetAddress(uint8_t UART1_Address)
                                    766 ;	-----------------------------------------
                                    767 ;	 function UART1_SetAddress
                                    768 ;	-----------------------------------------
      000372                        769 _UART1_SetAddress:
                                    770 ;	libstm8s/src/stm8s_uart1.c: 517: UART1->CR4 &= ((uint8_t)~UART1_CR4_ADD);
      000372 AE 52 37         [ 2]  771 	ldw	x, #0x5237
      000375 F6               [ 1]  772 	ld	a, (x)
      000376 A4 F0            [ 1]  773 	and	a, #0xf0
      000378 F7               [ 1]  774 	ld	(x), a
                                    775 ;	libstm8s/src/stm8s_uart1.c: 519: UART1->CR4 |= UART1_Address;
      000379 AE 52 37         [ 2]  776 	ldw	x, #0x5237
      00037C F6               [ 1]  777 	ld	a, (x)
      00037D 1A 03            [ 1]  778 	or	a, (0x03, sp)
      00037F AE 52 37         [ 2]  779 	ldw	x, #0x5237
      000382 F7               [ 1]  780 	ld	(x), a
      000383 81               [ 4]  781 	ret
                                    782 ;	libstm8s/src/stm8s_uart1.c: 528: void UART1_SetGuardTime(uint8_t UART1_GuardTime)
                                    783 ;	-----------------------------------------
                                    784 ;	 function UART1_SetGuardTime
                                    785 ;	-----------------------------------------
      000384                        786 _UART1_SetGuardTime:
                                    787 ;	libstm8s/src/stm8s_uart1.c: 531: UART1->GTR = UART1_GuardTime;
      000384 AE 52 39         [ 2]  788 	ldw	x, #0x5239
      000387 7B 03            [ 1]  789 	ld	a, (0x03, sp)
      000389 F7               [ 1]  790 	ld	(x), a
      00038A 81               [ 4]  791 	ret
                                    792 ;	libstm8s/src/stm8s_uart1.c: 556: void UART1_SetPrescaler(uint8_t UART1_Prescaler)
                                    793 ;	-----------------------------------------
                                    794 ;	 function UART1_SetPrescaler
                                    795 ;	-----------------------------------------
      00038B                        796 _UART1_SetPrescaler:
                                    797 ;	libstm8s/src/stm8s_uart1.c: 559: UART1->PSCR = UART1_Prescaler;
      00038B AE 52 3A         [ 2]  798 	ldw	x, #0x523a
      00038E 7B 03            [ 1]  799 	ld	a, (0x03, sp)
      000390 F7               [ 1]  800 	ld	(x), a
      000391 81               [ 4]  801 	ret
                                    802 ;	libstm8s/src/stm8s_uart1.c: 568: FlagStatus UART1_GetFlagStatus(UART1_Flag_TypeDef UART1_FLAG)
                                    803 ;	-----------------------------------------
                                    804 ;	 function UART1_GetFlagStatus
                                    805 ;	-----------------------------------------
      000392                        806 _UART1_GetFlagStatus:
      000392 88               [ 1]  807 	push	a
                                    808 ;	libstm8s/src/stm8s_uart1.c: 579: if ((UART1->CR4 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      000393 7B 05            [ 1]  809 	ld	a, (0x05, sp)
      000395 6B 01            [ 1]  810 	ld	(0x01, sp), a
                                    811 ;	libstm8s/src/stm8s_uart1.c: 577: if (UART1_FLAG == UART1_FLAG_LBDF)
      000397 1E 04            [ 2]  812 	ldw	x, (0x04, sp)
      000399 A3 02 10         [ 2]  813 	cpw	x, #0x0210
      00039C 26 10            [ 1]  814 	jrne	00114$
                                    815 ;	libstm8s/src/stm8s_uart1.c: 579: if ((UART1->CR4 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      00039E AE 52 37         [ 2]  816 	ldw	x, #0x5237
      0003A1 F6               [ 1]  817 	ld	a, (x)
      0003A2 14 01            [ 1]  818 	and	a, (0x01, sp)
      0003A4 4D               [ 1]  819 	tnz	a
      0003A5 27 04            [ 1]  820 	jreq	00102$
                                    821 ;	libstm8s/src/stm8s_uart1.c: 582: status = SET;
      0003A7 A6 01            [ 1]  822 	ld	a, #0x01
      0003A9 20 27            [ 2]  823 	jra	00115$
      0003AB                        824 00102$:
                                    825 ;	libstm8s/src/stm8s_uart1.c: 587: status = RESET;
      0003AB 4F               [ 1]  826 	clr	a
      0003AC 20 24            [ 2]  827 	jra	00115$
      0003AE                        828 00114$:
                                    829 ;	libstm8s/src/stm8s_uart1.c: 590: else if (UART1_FLAG == UART1_FLAG_SBK)
      0003AE 1E 04            [ 2]  830 	ldw	x, (0x04, sp)
      0003B0 A3 01 01         [ 2]  831 	cpw	x, #0x0101
      0003B3 26 10            [ 1]  832 	jrne	00111$
                                    833 ;	libstm8s/src/stm8s_uart1.c: 592: if ((UART1->CR2 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      0003B5 AE 52 35         [ 2]  834 	ldw	x, #0x5235
      0003B8 F6               [ 1]  835 	ld	a, (x)
      0003B9 14 01            [ 1]  836 	and	a, (0x01, sp)
      0003BB 4D               [ 1]  837 	tnz	a
      0003BC 27 04            [ 1]  838 	jreq	00105$
                                    839 ;	libstm8s/src/stm8s_uart1.c: 595: status = SET;
      0003BE A6 01            [ 1]  840 	ld	a, #0x01
      0003C0 20 10            [ 2]  841 	jra	00115$
      0003C2                        842 00105$:
                                    843 ;	libstm8s/src/stm8s_uart1.c: 600: status = RESET;
      0003C2 4F               [ 1]  844 	clr	a
      0003C3 20 0D            [ 2]  845 	jra	00115$
      0003C5                        846 00111$:
                                    847 ;	libstm8s/src/stm8s_uart1.c: 605: if ((UART1->SR & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      0003C5 AE 52 30         [ 2]  848 	ldw	x, #0x5230
      0003C8 F6               [ 1]  849 	ld	a, (x)
      0003C9 14 01            [ 1]  850 	and	a, (0x01, sp)
      0003CB 4D               [ 1]  851 	tnz	a
      0003CC 27 03            [ 1]  852 	jreq	00108$
                                    853 ;	libstm8s/src/stm8s_uart1.c: 608: status = SET;
      0003CE A6 01            [ 1]  854 	ld	a, #0x01
                                    855 ;	libstm8s/src/stm8s_uart1.c: 613: status = RESET;
      0003D0 21                     856 	.byte 0x21
      0003D1                        857 00108$:
      0003D1 4F               [ 1]  858 	clr	a
      0003D2                        859 00115$:
                                    860 ;	libstm8s/src/stm8s_uart1.c: 617: return status;
      0003D2 5B 01            [ 2]  861 	addw	sp, #1
      0003D4 81               [ 4]  862 	ret
                                    863 ;	libstm8s/src/stm8s_uart1.c: 646: void UART1_ClearFlag(UART1_Flag_TypeDef UART1_FLAG)
                                    864 ;	-----------------------------------------
                                    865 ;	 function UART1_ClearFlag
                                    866 ;	-----------------------------------------
      0003D5                        867 _UART1_ClearFlag:
                                    868 ;	libstm8s/src/stm8s_uart1.c: 651: if (UART1_FLAG == UART1_FLAG_RXNE)
      0003D5 1E 03            [ 2]  869 	ldw	x, (0x03, sp)
      0003D7 A3 00 20         [ 2]  870 	cpw	x, #0x0020
      0003DA 26 06            [ 1]  871 	jrne	00102$
                                    872 ;	libstm8s/src/stm8s_uart1.c: 653: UART1->SR = (uint8_t)~(UART1_SR_RXNE);
      0003DC 35 DF 52 30      [ 1]  873 	mov	0x5230+0, #0xdf
      0003E0 20 07            [ 2]  874 	jra	00104$
      0003E2                        875 00102$:
                                    876 ;	libstm8s/src/stm8s_uart1.c: 658: UART1->CR4 &= (uint8_t)~(UART1_CR4_LBDF);
      0003E2 AE 52 37         [ 2]  877 	ldw	x, #0x5237
      0003E5 F6               [ 1]  878 	ld	a, (x)
      0003E6 A4 EF            [ 1]  879 	and	a, #0xef
      0003E8 F7               [ 1]  880 	ld	(x), a
      0003E9                        881 00104$:
      0003E9 81               [ 4]  882 	ret
                                    883 ;	libstm8s/src/stm8s_uart1.c: 675: ITStatus UART1_GetITStatus(UART1_IT_TypeDef UART1_IT)
                                    884 ;	-----------------------------------------
                                    885 ;	 function UART1_GetITStatus
                                    886 ;	-----------------------------------------
      0003EA                        887 _UART1_GetITStatus:
      0003EA 52 05            [ 2]  888 	sub	sp, #5
                                    889 ;	libstm8s/src/stm8s_uart1.c: 687: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART1_IT & (uint8_t)0x0F));
      0003EC 7B 09            [ 1]  890 	ld	a, (0x09, sp)
      0003EE 95               [ 1]  891 	ld	xh, a
      0003EF A4 0F            [ 1]  892 	and	a, #0x0f
      0003F1 97               [ 1]  893 	ld	xl, a
      0003F2 A6 01            [ 1]  894 	ld	a, #0x01
      0003F4 88               [ 1]  895 	push	a
      0003F5 9F               [ 1]  896 	ld	a, xl
      0003F6 4D               [ 1]  897 	tnz	a
      0003F7 27 05            [ 1]  898 	jreq	00154$
      0003F9                        899 00153$:
      0003F9 08 01            [ 1]  900 	sll	(1, sp)
      0003FB 4A               [ 1]  901 	dec	a
      0003FC 26 FB            [ 1]  902 	jrne	00153$
      0003FE                        903 00154$:
      0003FE 84               [ 1]  904 	pop	a
      0003FF 6B 03            [ 1]  905 	ld	(0x03, sp), a
                                    906 ;	libstm8s/src/stm8s_uart1.c: 689: itmask1 = (uint8_t)((uint8_t)UART1_IT >> (uint8_t)4);
      000401 02               [ 1]  907 	rlwa	x
      000402 4E               [ 1]  908 	swap	a
      000403 A4 0F            [ 1]  909 	and	a, #0x0f
      000405 01               [ 1]  910 	rrwa	x
                                    911 ;	libstm8s/src/stm8s_uart1.c: 691: itmask2 = (uint8_t)((uint8_t)1 << itmask1);
      000406 A6 01            [ 1]  912 	ld	a, #0x01
      000408 88               [ 1]  913 	push	a
      000409 9E               [ 1]  914 	ld	a, xh
      00040A 4D               [ 1]  915 	tnz	a
      00040B 27 05            [ 1]  916 	jreq	00156$
      00040D                        917 00155$:
      00040D 08 01            [ 1]  918 	sll	(1, sp)
      00040F 4A               [ 1]  919 	dec	a
      000410 26 FB            [ 1]  920 	jrne	00155$
      000412                        921 00156$:
      000412 84               [ 1]  922 	pop	a
      000413 6B 02            [ 1]  923 	ld	(0x02, sp), a
                                    924 ;	libstm8s/src/stm8s_uart1.c: 695: if (UART1_IT == UART1_IT_PE)
      000415 1E 08            [ 2]  925 	ldw	x, (0x08, sp)
      000417 A3 01 00         [ 2]  926 	cpw	x, #0x0100
      00041A 26 1C            [ 1]  927 	jrne	00117$
                                    928 ;	libstm8s/src/stm8s_uart1.c: 698: enablestatus = (uint8_t)((uint8_t)UART1->CR1 & itmask2);
      00041C AE 52 34         [ 2]  929 	ldw	x, #0x5234
      00041F F6               [ 1]  930 	ld	a, (x)
      000420 14 02            [ 1]  931 	and	a, (0x02, sp)
      000422 6B 05            [ 1]  932 	ld	(0x05, sp), a
                                    933 ;	libstm8s/src/stm8s_uart1.c: 701: if (((UART1->SR & itpos) != (uint8_t)0x00) && enablestatus)
      000424 AE 52 30         [ 2]  934 	ldw	x, #0x5230
      000427 F6               [ 1]  935 	ld	a, (x)
      000428 14 03            [ 1]  936 	and	a, (0x03, sp)
      00042A 4D               [ 1]  937 	tnz	a
      00042B 27 08            [ 1]  938 	jreq	00102$
      00042D 0D 05            [ 1]  939 	tnz	(0x05, sp)
      00042F 27 04            [ 1]  940 	jreq	00102$
                                    941 ;	libstm8s/src/stm8s_uart1.c: 704: pendingbitstatus = SET;
      000431 A6 01            [ 1]  942 	ld	a, #0x01
      000433 20 3F            [ 2]  943 	jra	00118$
      000435                        944 00102$:
                                    945 ;	libstm8s/src/stm8s_uart1.c: 709: pendingbitstatus = RESET;
      000435 4F               [ 1]  946 	clr	a
      000436 20 3C            [ 2]  947 	jra	00118$
      000438                        948 00117$:
                                    949 ;	libstm8s/src/stm8s_uart1.c: 713: else if (UART1_IT == UART1_IT_LBDF)
      000438 1E 08            [ 2]  950 	ldw	x, (0x08, sp)
      00043A A3 03 46         [ 2]  951 	cpw	x, #0x0346
      00043D 26 1C            [ 1]  952 	jrne	00114$
                                    953 ;	libstm8s/src/stm8s_uart1.c: 716: enablestatus = (uint8_t)((uint8_t)UART1->CR4 & itmask2);
      00043F AE 52 37         [ 2]  954 	ldw	x, #0x5237
      000442 F6               [ 1]  955 	ld	a, (x)
      000443 14 02            [ 1]  956 	and	a, (0x02, sp)
      000445 6B 01            [ 1]  957 	ld	(0x01, sp), a
                                    958 ;	libstm8s/src/stm8s_uart1.c: 718: if (((UART1->CR4 & itpos) != (uint8_t)0x00) && enablestatus)
      000447 AE 52 37         [ 2]  959 	ldw	x, #0x5237
      00044A F6               [ 1]  960 	ld	a, (x)
      00044B 14 03            [ 1]  961 	and	a, (0x03, sp)
      00044D 4D               [ 1]  962 	tnz	a
      00044E 27 08            [ 1]  963 	jreq	00106$
      000450 0D 01            [ 1]  964 	tnz	(0x01, sp)
      000452 27 04            [ 1]  965 	jreq	00106$
                                    966 ;	libstm8s/src/stm8s_uart1.c: 721: pendingbitstatus = SET;
      000454 A6 01            [ 1]  967 	ld	a, #0x01
      000456 20 1C            [ 2]  968 	jra	00118$
      000458                        969 00106$:
                                    970 ;	libstm8s/src/stm8s_uart1.c: 726: pendingbitstatus = RESET;
      000458 4F               [ 1]  971 	clr	a
      000459 20 19            [ 2]  972 	jra	00118$
      00045B                        973 00114$:
                                    974 ;	libstm8s/src/stm8s_uart1.c: 732: enablestatus = (uint8_t)((uint8_t)UART1->CR2 & itmask2);
      00045B AE 52 35         [ 2]  975 	ldw	x, #0x5235
      00045E F6               [ 1]  976 	ld	a, (x)
      00045F 14 02            [ 1]  977 	and	a, (0x02, sp)
      000461 6B 04            [ 1]  978 	ld	(0x04, sp), a
                                    979 ;	libstm8s/src/stm8s_uart1.c: 734: if (((UART1->SR & itpos) != (uint8_t)0x00) && enablestatus)
      000463 AE 52 30         [ 2]  980 	ldw	x, #0x5230
      000466 F6               [ 1]  981 	ld	a, (x)
      000467 14 03            [ 1]  982 	and	a, (0x03, sp)
      000469 4D               [ 1]  983 	tnz	a
      00046A 27 07            [ 1]  984 	jreq	00110$
      00046C 0D 04            [ 1]  985 	tnz	(0x04, sp)
      00046E 27 03            [ 1]  986 	jreq	00110$
                                    987 ;	libstm8s/src/stm8s_uart1.c: 737: pendingbitstatus = SET;
      000470 A6 01            [ 1]  988 	ld	a, #0x01
                                    989 ;	libstm8s/src/stm8s_uart1.c: 742: pendingbitstatus = RESET;
      000472 21                     990 	.byte 0x21
      000473                        991 00110$:
      000473 4F               [ 1]  992 	clr	a
      000474                        993 00118$:
                                    994 ;	libstm8s/src/stm8s_uart1.c: 747: return  pendingbitstatus;
      000474 5B 05            [ 2]  995 	addw	sp, #5
      000476 81               [ 4]  996 	ret
                                    997 ;	libstm8s/src/stm8s_uart1.c: 775: void UART1_ClearITPendingBit(UART1_IT_TypeDef UART1_IT)
                                    998 ;	-----------------------------------------
                                    999 ;	 function UART1_ClearITPendingBit
                                   1000 ;	-----------------------------------------
      000477                       1001 _UART1_ClearITPendingBit:
                                   1002 ;	libstm8s/src/stm8s_uart1.c: 780: if (UART1_IT == UART1_IT_RXNE)
      000477 1E 03            [ 2] 1003 	ldw	x, (0x03, sp)
      000479 A3 02 55         [ 2] 1004 	cpw	x, #0x0255
      00047C 26 06            [ 1] 1005 	jrne	00102$
                                   1006 ;	libstm8s/src/stm8s_uart1.c: 782: UART1->SR = (uint8_t)~(UART1_SR_RXNE);
      00047E 35 DF 52 30      [ 1] 1007 	mov	0x5230+0, #0xdf
      000482 20 07            [ 2] 1008 	jra	00104$
      000484                       1009 00102$:
                                   1010 ;	libstm8s/src/stm8s_uart1.c: 787: UART1->CR4 &= (uint8_t)~(UART1_CR4_LBDF);
      000484 AE 52 37         [ 2] 1011 	ldw	x, #0x5237
      000487 F6               [ 1] 1012 	ld	a, (x)
      000488 A4 EF            [ 1] 1013 	and	a, #0xef
      00048A F7               [ 1] 1014 	ld	(x), a
      00048B                       1015 00104$:
      00048B 81               [ 4] 1016 	ret
                                   1017 	.area CODE
                                   1018 	.area INITIALIZER
                                   1019 	.area CABS (ABS)
